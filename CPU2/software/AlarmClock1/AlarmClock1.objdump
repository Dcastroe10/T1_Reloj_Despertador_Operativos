
AlarmClock1.elf:     file format elf32-littlenios2
AlarmClock1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001ca8 memsz 0x00001ca8 flags r-x
    LOAD off    0x00002cc8 vaddr 0x00011cc8 paddr 0x00011de4 align 2**12
         filesz 0x0000011c memsz 0x0000011c flags rw-
    LOAD off    0x00002f00 vaddr 0x00011f00 paddr 0x00011f00 align 2**12
         filesz 0x00000000 memsz 0x00000140 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001ad8  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  00011c58  00011c58  00002c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000011c  00011cc8  00011de4  00002cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000140  00011f00  00011f00  00002f00  2**2
                  ALLOC, SMALL_DATA
  6 .ONCHIPRAM    00000000  00012040  00012040  00002de4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000430  00000000  00000000  00002e08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005faa  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002055  00000000  00000000  000091e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000023c8  00000000  00000000  0000b237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000006b4  00000000  00000000  0000d600  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000181f  00000000  00000000  0000dcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002595  00000000  00000000  0000f4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00011a68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a8  00000000  00000000  00011a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00013556  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00013559  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001355f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00013560  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00013561  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00013565  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00013569  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  0001356d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  0001357a  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c86  00000000  00000000  000135a7  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006dd32  00000000  00000000  0001822d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011c58 l    d  .rodata	00000000 .rodata
00011cc8 l    d  .rwdata	00000000 .rwdata
00011f00 l    d  .bss	00000000 .bss
00012040 l    d  .ONCHIPRAM	00000000 .ONCHIPRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AlarmClock1_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000101bc l     F .text	00000064 sumIndex.part.1
00011cbc l     O .rodata	0000000a CSWTCH.73
000103dc l     F .text	00000060 timer_isr
00011f00 l     O .bss	00000004 count.2644
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000109a4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00010f58 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
00011cc8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00011f3c g     O .bss	00000004 alt_instruction_exception_handler
00011af0 g     F .text	0000002c alt_main
00011f40 g     O .bss	00000100 alt_irq
00011de4 g       *ABS*	00000000 __flash_rwdata_start
0001087c g     F .text	0000004c printf
000104a8 g     F .text	00000108 sumIndexAlarm
0001166c g     F .text	00000060 memmove
00011c50 g     F .text	00000008 altera_nios2_gen2_irq_init
00010220 g     F .text	0000002c intTo7segment
000115c4 g     F .text	000000a8 __sfvwrite_small_str
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000105b0 g     F .text	000000f4 alarmSetup
00011f28 g     O .bss	00000004 errno
00010000 g       *ABS*	00000000 __alt_mem_ONCHIPRAM
00011f34 g     O .bss	00000004 alt_argv
00019da8 g       *ABS*	00000000 _gp
00011dc8 g     O .rwdata	00000004 segment2
00011dcc g     O .rwdata	00000004 segment1
00011f04 g     O .bss	00000004 aHours
00011bdc g     F .text	00000074 alt_exception_cause_generated_bad_addr
00011f08 g     O .bss	00000004 indx
00010840 g     F .text	0000003c _printf_r
00011838 g     F .text	00000064 .hidden __udivsi3
00011f0c g     O .bss	00000004 debounce
00011f10 g     O .bss	00000004 aMinutes
00011db0 g     O .rwdata	00000004 button4
0001031c g     F .text	00000034 checkAlarm
00011dd0 g     O .rwdata	00000004 _global_impure_ptr
00012040 g       *ABS*	00000000 __bss_end
000119a8 g     F .text	00000068 alt_iic_isr_register
00011990 g     F .text	00000018 alt_ic_irq_enabled
00011f14 g     O .bss	00000004 state
00011f2c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011bd4 g     F .text	00000004 alt_dcache_flush_all
00011de4 g       *ABS*	00000000 __ram_rwdata_end
00011b1c g     F .text	00000060 write
00011cc8 g       *ABS*	00000000 __ram_rodata_end
0001189c g     F .text	00000058 .hidden __umodsi3
00011da8 g     O .rwdata	00000004 buzzer
00012040 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00011ba0 g     F .text	00000034 altera_avalon_jtag_uart_write
00010fc4 g     F .text	0000052c ___vfprintf_internal_r
000108c8 g     F .text	00000064 _sprintf_r
000102dc g     F .text	00000040 init_timer_interrupt
0001024c g     F .text	00000090 displayHour
00010180 g     F .text	0000003c _start
00011b9c g     F .text	00000004 alt_sys_init
000118f4 g     F .text	00000028 .hidden __mulsi3
00011cc8 g       *ABS*	00000000 __ram_rwdata_start
00011c58 g       *ABS*	00000000 __ram_rodata_start
00012040 g       *ABS*	00000000 __alt_stack_base
00011db8 g     O .rwdata	00000004 button2
00010a10 g     F .text	0000052c ___svfprintf_internal_r
0001150c g     F .text	000000b8 __sfvwrite_small_dev
00011f00 g       *ABS*	00000000 __bss_start
00010790 g     F .text	000000b0 main
00011f30 g     O .bss	00000004 alt_envp
0001043c g     F .text	0000006c sumIndex
00011ddc g     O .rwdata	00000004 JTAG
00011de0 g     O .rwdata	00000004 alt_errno
00011f18 g     O .bss	00000004 seconds
00011db4 g     O .rwdata	00000004 button3
00011740 g     F .text	00000084 .hidden __divsi3
00011c58 g       *ABS*	00000000 __flash_rodata_start
00011b7c g     F .text	00000020 alt_irq_init
0001092c g     F .text	00000078 sprintf
000116e8 g     F .text	00000058 _write_r
00011dd4 g     O .rwdata	00000004 _impure_ptr
00011f38 g     O .bss	00000004 alt_argc
00010350 g     F .text	0000008c checkClock
00010020 g       .exceptions	00000000 alt_irq_entry
00010f3c g     F .text	0000001c __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
0001191c g     F .text	00000004 alt_ic_isr_register
00011dbc g     O .rwdata	00000004 button1
00011de4 g       *ABS*	00000000 _edata
00012040 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00011dc0 g     O .rwdata	00000004 segment4
00011dc4 g     O .rwdata	00000004 segment3
00011958 g     F .text	00000038 alt_ic_irq_disable
000117c4 g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00011f1c g     O .bss	00000004 minutes
000116cc g     F .text	0000001c strlen
00011f20 g     O .bss	00000004 isAlarmOn
00011bd8 g     F .text	00000004 alt_icache_flush_all
00011f24 g     O .bss	00000004 hours
00011dd8 g     O .rwdata	00000004 alt_priority_mask
000106a4 g     F .text	000000ec clockSetup
00011920 g     F .text	00000038 alt_ic_irq_enable
000114f0 g     F .text	0000001c __vfprintf_internal
00011a10 g     F .text	000000e0 alt_load
00011dac g     O .rwdata	00000004 alarm1



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1010c:	04000074 	movhi	r16,1
   10110:	8407d004 	addi	r16,r16,8000

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	0005883a 	mov	r2,zero
    mask = 1;
   10118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	20ca703a 	and	r5,r4,r3
   10120:	28000b26 	beq	r5,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10124:	100490fa 	slli	r2,r2,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	203ff51e 	bne	r4,zero,10114 <__alt_data_end+0xffff6114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	18c7883a 	add	r3,r3,r3
      i++;
   10154:	10800044 	addi	r2,r2,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff611c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a06517 	ldw	r2,-32364(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a76a14 	ori	gp,gp,40360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1087c014 	ori	r2,r2,7936

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c81014 	ori	r3,r3,8256

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff61a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0011a100 	call	11a10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0011af00 	call	11af0 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff61b8>

000101bc <sumIndex.part.1>:

void sumIndex( int op){

	if(op == 0){

		switch(indx){
   101bc:	d0a05817 	ldw	r2,-32416(gp)
   101c0:	00c00044 	movi	r3,1
   101c4:	10c00b26 	beq	r2,r3,101f4 <sumIndex.part.1+0x38>
   101c8:	18800216 	blt	r3,r2,101d4 <sumIndex.part.1+0x18>
   101cc:	10000626 	beq	r2,zero,101e8 <sumIndex.part.1+0x2c>
   101d0:	f800283a 	ret
   101d4:	00c00084 	movi	r3,2
   101d8:	10c00a26 	beq	r2,r3,10204 <sumIndex.part.1+0x48>
   101dc:	00c000c4 	movi	r3,3
   101e0:	10c00b26 	beq	r2,r3,10210 <sumIndex.part.1+0x54>
   101e4:	f800283a 	ret
			case 0:
					minutes += 1;
   101e8:	d0a05d17 	ldw	r2,-32396(gp)
   101ec:	10800044 	addi	r2,r2,1
   101f0:	00000206 	br	101fc <sumIndex.part.1+0x40>
					break;
			case 1:
					minutes += 10;
   101f4:	d0a05d17 	ldw	r2,-32396(gp)
   101f8:	10800284 	addi	r2,r2,10
   101fc:	d0a05d15 	stw	r2,-32396(gp)
   10200:	f800283a 	ret
					break;
			case 2:
					hours += 1;
   10204:	d0a05f17 	ldw	r2,-32388(gp)
   10208:	10800044 	addi	r2,r2,1
   1020c:	00000206 	br	10218 <sumIndex.part.1+0x5c>
					break;
			case 3:
					hours += 10;
   10210:	d0a05f17 	ldw	r2,-32388(gp)
   10214:	10800284 	addi	r2,r2,10
   10218:	d0a05f15 	stw	r2,-32388(gp)
   1021c:	f800283a 	ret

00010220 <intTo7segment>:
    int seconds,  hours , minutes, indx, debounce, state ,isAlarmOn, aHours,aMinutes;

    static void timer_isr(void * context, alt_u32 id);

//converts a character of a number into its 7 segment 7 bits equivalent
int intTo7segment(char number){
   10220:	213ff404 	addi	r4,r4,-48
   10224:	21003fcc 	andi	r4,r4,255
   10228:	00800244 	movi	r2,9
   1022c:	11000536 	bltu	r2,r4,10244 <intTo7segment+0x24>
   10230:	00800074 	movhi	r2,1
   10234:	10872f04 	addi	r2,r2,7356
   10238:	1109883a 	add	r4,r2,r4
   1023c:	20800003 	ldbu	r2,0(r4)
   10240:	f800283a 	ret

	switch (number) {
   10244:	00801fc4 	movi	r2,127

	  default:
	    return 0b1111111;
	}

}
   10248:	f800283a 	ret

0001024c <displayHour>:

void displayHour(int hour, int minute){
   1024c:	defffb04 	addi	sp,sp,-20
   10250:	dc000215 	stw	r16,8(sp)


	char hStr[3] ;
	char mStr[3] ;

	sprintf(hStr,"%d",hour);
   10254:	04000074 	movhi	r16,1
   10258:	84071e04 	addi	r16,r16,7288
	    return 0b1111111;
	}

}

void displayHour(int hour, int minute){
   1025c:	dc400315 	stw	r17,12(sp)


	char hStr[3] ;
	char mStr[3] ;

	sprintf(hStr,"%d",hour);
   10260:	200d883a 	mov	r6,r4
	    return 0b1111111;
	}

}

void displayHour(int hour, int minute){
   10264:	2823883a 	mov	r17,r5


	char hStr[3] ;
	char mStr[3] ;

	sprintf(hStr,"%d",hour);
   10268:	d90000c4 	addi	r4,sp,3
   1026c:	800b883a 	mov	r5,r16
	    return 0b1111111;
	}

}

void displayHour(int hour, int minute){
   10270:	dfc00415 	stw	ra,16(sp)


	char hStr[3] ;
	char mStr[3] ;

	sprintf(hStr,"%d",hour);
   10274:	001092c0 	call	1092c <sprintf>
	sprintf(mStr,"%d",minute);
   10278:	800b883a 	mov	r5,r16
   1027c:	880d883a 	mov	r6,r17
   10280:	d809883a 	mov	r4,sp
   10284:	001092c0 	call	1092c <sprintf>


	*segment1 = intTo7segment(mStr[1]);
   10288:	d9000047 	ldb	r4,1(sp)
   1028c:	d4200917 	ldw	r16,-32732(gp)
   10290:	00102200 	call	10220 <intTo7segment>
   10294:	8080000d 	sth	r2,0(r16)
	*segment2 = intTo7segment(mStr[0]);
   10298:	d9000007 	ldb	r4,0(sp)
   1029c:	d4200817 	ldw	r16,-32736(gp)
   102a0:	00102200 	call	10220 <intTo7segment>
   102a4:	8080000d 	sth	r2,0(r16)
	*segment3 = intTo7segment(hStr[1]);
   102a8:	d9000107 	ldb	r4,4(sp)
   102ac:	d4200717 	ldw	r16,-32740(gp)
   102b0:	00102200 	call	10220 <intTo7segment>
   102b4:	8080000d 	sth	r2,0(r16)
	*segment4 = intTo7segment(hStr[0]);
   102b8:	d90000c7 	ldb	r4,3(sp)
   102bc:	d4200617 	ldw	r16,-32744(gp)
   102c0:	00102200 	call	10220 <intTo7segment>
   102c4:	8080000d 	sth	r2,0(r16)

}
   102c8:	dfc00417 	ldw	ra,16(sp)
   102cc:	dc400317 	ldw	r17,12(sp)
   102d0:	dc000217 	ldw	r16,8(sp)
   102d4:	dec00504 	addi	sp,sp,20
   102d8:	f800283a 	ret

000102dc <init_timer_interrupt>:



void init_timer_interrupt(void ){
   102dc:	defffe04 	addi	sp,sp,-8


	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_IRQ, (void *)timer_isr,NULL,0x0);
   102e0:	01800074 	movhi	r6,1
   102e4:	d8000015 	stw	zero,0(sp)
   102e8:	000f883a 	mov	r7,zero
   102ec:	3180f704 	addi	r6,r6,988
   102f0:	01400044 	movi	r5,1
   102f4:	0009883a 	mov	r4,zero

}



void init_timer_interrupt(void ){
   102f8:	dfc00115 	stw	ra,4(sp)


	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_IRQ, (void *)timer_isr,NULL,0x0);
   102fc:	001191c0 	call	1191c <alt_ic_isr_register>

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
   10300:	008000b4 	movhi	r2,2
   10304:	10840104 	addi	r2,r2,4100
   10308:	00c001c4 	movi	r3,7
   1030c:	10c00035 	stwio	r3,0(r2)
			| ALTERA_AVALON_TIMER_CONTROL_START_MSK
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
}
   10310:	dfc00117 	ldw	ra,4(sp)
   10314:	dec00204 	addi	sp,sp,8
   10318:	f800283a 	ret

0001031c <checkAlarm>:


}

void checkAlarm(){
	if(hours == aHours && minutes == aMinutes){
   1031c:	d0a05717 	ldw	r2,-32420(gp)
   10320:	d0e05f17 	ldw	r3,-32388(gp)
   10324:	1880091e 	bne	r3,r2,1034c <checkAlarm+0x30>
   10328:	d0a05a17 	ldw	r2,-32408(gp)
   1032c:	d0e05d17 	ldw	r3,-32396(gp)
   10330:	1880061e 	bne	r3,r2,1034c <checkAlarm+0x30>
		*buzzer = 0b10;
   10334:	d0a00017 	ldw	r2,-32768(gp)
		printf("PimPom alarma");
   10338:	01000074 	movhi	r4,1

}

void checkAlarm(){
	if(hours == aHours && minutes == aMinutes){
		*buzzer = 0b10;
   1033c:	00c00084 	movi	r3,2
		printf("PimPom alarma");
   10340:	21071604 	addi	r4,r4,7256

}

void checkAlarm(){
	if(hours == aHours && minutes == aMinutes){
		*buzzer = 0b10;
   10344:	10c0000d 	sth	r3,0(r2)
		printf("PimPom alarma");
   10348:	001087c1 	jmpi	1087c <printf>
   1034c:	f800283a 	ret

00010350 <checkClock>:
	}
}

void checkClock(void){

	if(seconds >= 60){
   10350:	d0a05c17 	ldw	r2,-32400(gp)
   10354:	01000ec4 	movi	r4,59
   10358:	d0e05d17 	ldw	r3,-32396(gp)
   1035c:	20800b0e 	bge	r4,r2,1038c <checkClock+0x3c>
	}else{
		;
	}
}

void checkClock(void){
   10360:	deffff04 	addi	sp,sp,-4

	if(seconds >= 60){
		 minutes ++;
   10364:	18c00044 	addi	r3,r3,1
	}else{
		;
	}
}

void checkClock(void){
   10368:	dfc00015 	stw	ra,0(sp)

	if(seconds >= 60){
		 minutes ++;
   1036c:	d0e05d15 	stw	r3,-32396(gp)
		 seconds = 0;
   10370:	d0205c15 	stw	zero,-32400(gp)
		 checkAlarm();
   10374:	001031c0 	call	1031c <checkAlarm>
		hours = 0;
}
	else if(hours < 0){
			hours = 23;
}
	displayHour(hours,minutes);
   10378:	d1605d17 	ldw	r5,-32396(gp)
   1037c:	d1205f17 	ldw	r4,-32388(gp)


}
   10380:	dfc00017 	ldw	ra,0(sp)
   10384:	dec00104 	addi	sp,sp,4
   10388:	00001306 	br	103d8 <checkClock+0x88>
   1038c:	d0a05f17 	ldw	r2,-32388(gp)
	if(seconds >= 60){
		 minutes ++;
		 seconds = 0;
		 checkAlarm();
}
	else if (minutes >= 60){
   10390:	20c0040e 	bge	r4,r3,103a4 <checkClock+0x54>
		hours++;
   10394:	10800044 	addi	r2,r2,1
   10398:	d0a05f15 	stw	r2,-32388(gp)
		minutes = 0;
   1039c:	d0205d15 	stw	zero,-32396(gp)
   103a0:	00000b06 	br	103d0 <checkClock+0x80>

}
	else if (minutes < 0){
   103a4:	1800040e 	bge	r3,zero,103b8 <checkClock+0x68>
			hours--;
   103a8:	10bfffc4 	addi	r2,r2,-1
   103ac:	d0a05f15 	stw	r2,-32388(gp)
			minutes = 59;
   103b0:	d1205d15 	stw	r4,-32396(gp)
   103b4:	00000606 	br	103d0 <checkClock+0x80>
}
	else if(hours >= 24){
   103b8:	00c005c4 	movi	r3,23
   103bc:	1880020e 	bge	r3,r2,103c8 <checkClock+0x78>
		hours = 0;
   103c0:	d0205f15 	stw	zero,-32388(gp)
   103c4:	00000206 	br	103d0 <checkClock+0x80>
}
	else if(hours < 0){
   103c8:	1000010e 	bge	r2,zero,103d0 <checkClock+0x80>
			hours = 23;
   103cc:	d0e05f15 	stw	r3,-32388(gp)
}
	displayHour(hours,minutes);
   103d0:	d1605d17 	ldw	r5,-32396(gp)
   103d4:	d1205f17 	ldw	r4,-32388(gp)
   103d8:	001024c1 	jmpi	1024c <displayHour>

000103dc <timer_isr>:
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
}



static void timer_isr(void * context, alt_u32 id){
   103dc:	deffff04 	addi	sp,sp,-4

	static int count = 0;


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE,0);
   103e0:	008000b4 	movhi	r2,2
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
}



static void timer_isr(void * context, alt_u32 id){
   103e4:	dfc00015 	stw	ra,0(sp)

	static int count = 0;


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE,0);
   103e8:	10840004 	addi	r2,r2,4096
   103ec:	10000035 	stwio	zero,0(r2)

	if(count%4 == 0){
   103f0:	d0a05617 	ldw	r2,-32424(gp)
   103f4:	108000cc 	andi	r2,r2,3
   103f8:	1000041e 	bne	r2,zero,1040c <timer_isr+0x30>
			seconds++;
   103fc:	d0a05c17 	ldw	r2,-32400(gp)
   10400:	10800044 	addi	r2,r2,1
   10404:	d0a05c15 	stw	r2,-32400(gp)
			checkClock();
   10408:	00103500 	call	10350 <checkClock>


		}
	if(debounce != 0){
   1040c:	d0a05917 	ldw	r2,-32412(gp)
   10410:	10000226 	beq	r2,zero,1041c <timer_isr+0x40>
			debounce--;
   10414:	10bfffc4 	addi	r2,r2,-1
   10418:	d0a05915 	stw	r2,-32412(gp)
	}


	//displayHour(hours,minutes);
	printf("\nTimer expired: %d",count++);
   1041c:	d1605617 	ldw	r5,-32424(gp)
   10420:	01000074 	movhi	r4,1
   10424:	21071a04 	addi	r4,r4,7272
   10428:	28800044 	addi	r2,r5,1
   1042c:	d0a05615 	stw	r2,-32424(gp)



}
   10430:	dfc00017 	ldw	ra,0(sp)
   10434:	dec00104 	addi	sp,sp,4
			debounce--;
	}


	//displayHour(hours,minutes);
	printf("\nTimer expired: %d",count++);
   10438:	001087c1 	jmpi	1087c <printf>

0001043c <sumIndex>:
}


void sumIndex( int op){

	if(op == 0){
   1043c:	2000011e 	bne	r4,zero,10444 <sumIndex+0x8>
						hours -= 10;
						break;
	}
	}

}
   10440:	00101bc1 	jmpi	101bc <sumIndex.part.1>
	}
	}
		else {


			switch(indx){
   10444:	d0a05817 	ldw	r2,-32416(gp)
   10448:	00c00044 	movi	r3,1
   1044c:	10c00b26 	beq	r2,r3,1047c <sumIndex+0x40>
   10450:	18800216 	blt	r3,r2,1045c <sumIndex+0x20>
   10454:	10000626 	beq	r2,zero,10470 <sumIndex+0x34>
   10458:	f800283a 	ret
   1045c:	00c00084 	movi	r3,2
   10460:	10c00a26 	beq	r2,r3,1048c <sumIndex+0x50>
   10464:	00c000c4 	movi	r3,3
   10468:	10c00b26 	beq	r2,r3,10498 <sumIndex+0x5c>
   1046c:	f800283a 	ret
				case 0:
						minutes -= 1;
   10470:	d0a05d17 	ldw	r2,-32396(gp)
   10474:	10bfffc4 	addi	r2,r2,-1
   10478:	00000206 	br	10484 <sumIndex+0x48>
						break;
				case 1:
						minutes -= 10;
   1047c:	d0a05d17 	ldw	r2,-32396(gp)
   10480:	10bffd84 	addi	r2,r2,-10
   10484:	d0a05d15 	stw	r2,-32396(gp)
						break;
   10488:	f800283a 	ret
				case 2:
						hours -= 1;
   1048c:	d0a05f17 	ldw	r2,-32388(gp)
   10490:	10bfffc4 	addi	r2,r2,-1
   10494:	00000206 	br	104a0 <sumIndex+0x64>
						break;
				case 3:
						hours -= 10;
   10498:	d0a05f17 	ldw	r2,-32388(gp)
   1049c:	10bffd84 	addi	r2,r2,-10
   104a0:	d0a05f15 	stw	r2,-32388(gp)
   104a4:	f800283a 	ret

000104a8 <sumIndexAlarm>:
	}
	}

}

void sumIndexAlarm( int op){
   104a8:	d1605817 	ldw	r5,-32416(gp)
   104ac:	01800044 	movi	r6,1
   104b0:	d0e05a17 	ldw	r3,-32408(gp)
   104b4:	d0a05717 	ldw	r2,-32420(gp)

	if(op == 0){
   104b8:	20000f1e 	bne	r4,zero,104f8 <sumIndexAlarm+0x50>

		switch(indx){
   104bc:	29800a26 	beq	r5,r6,104e8 <sumIndexAlarm+0x40>
   104c0:	31400316 	blt	r6,r5,104d0 <sumIndexAlarm+0x28>
   104c4:	28001c1e 	bne	r5,zero,10538 <sumIndexAlarm+0x90>
			case 0:
					aMinutes += 1;
   104c8:	18c00044 	addi	r3,r3,1
   104cc:	00001606 	br	10528 <sumIndexAlarm+0x80>

void sumIndexAlarm( int op){

	if(op == 0){

		switch(indx){
   104d0:	00c00084 	movi	r3,2
   104d4:	28c00626 	beq	r5,r3,104f0 <sumIndexAlarm+0x48>
   104d8:	00c000c4 	movi	r3,3
   104dc:	28c0161e 	bne	r5,r3,10538 <sumIndexAlarm+0x90>
					break;
			case 2:
					aHours += 1;
					break;
			case 3:
					aHours += 10;
   104e0:	10800284 	addi	r2,r2,10
   104e4:	00001306 	br	10534 <sumIndexAlarm+0x8c>
		switch(indx){
			case 0:
					aMinutes += 1;
					break;
			case 1:
					aMinutes += 10;
   104e8:	18c00284 	addi	r3,r3,10
   104ec:	00000e06 	br	10528 <sumIndexAlarm+0x80>
					break;
			case 2:
					aHours += 1;
   104f0:	10800044 	addi	r2,r2,1
   104f4:	00000f06 	br	10534 <sumIndexAlarm+0x8c>
	}
	}
		else {


			switch(indx){
   104f8:	29800a26 	beq	r5,r6,10524 <sumIndexAlarm+0x7c>
   104fc:	31400316 	blt	r6,r5,1050c <sumIndexAlarm+0x64>
   10500:	28000d1e 	bne	r5,zero,10538 <sumIndexAlarm+0x90>
				case 0:
					aMinutes -= 1;
   10504:	18ffffc4 	addi	r3,r3,-1
   10508:	00000706 	br	10528 <sumIndexAlarm+0x80>
	}
	}
		else {


			switch(indx){
   1050c:	00c00084 	movi	r3,2
   10510:	28c00726 	beq	r5,r3,10530 <sumIndexAlarm+0x88>
   10514:	00c000c4 	movi	r3,3
   10518:	28c0071e 	bne	r5,r3,10538 <sumIndexAlarm+0x90>
						break;
				case 2:
					aHours -= 1;
						break;
				case 3:
					aHours -= 10;
   1051c:	10bffd84 	addi	r2,r2,-10
   10520:	00000406 	br	10534 <sumIndexAlarm+0x8c>
			switch(indx){
				case 0:
					aMinutes -= 1;
						break;
				case 1:
					aMinutes -= 10;
   10524:	18fffd84 	addi	r3,r3,-10
   10528:	d0e05a15 	stw	r3,-32408(gp)
						break;
   1052c:	00000206 	br	10538 <sumIndexAlarm+0x90>
				case 2:
					aHours -= 1;
   10530:	10bfffc4 	addi	r2,r2,-1
						break;
				case 3:
					aHours -= 10;
   10534:	d0a05715 	stw	r2,-32420(gp)
						break;
	}
	}


	if (aMinutes >= 60){
   10538:	d1605a17 	ldw	r5,-32408(gp)
   1053c:	00800ec4 	movi	r2,59
   10540:	d1205717 	ldw	r4,-32420(gp)
   10544:	1140060e 	bge	r2,r5,10560 <sumIndexAlarm+0xb8>
		aHours++;
   10548:	21000044 	addi	r4,r4,1
   1054c:	d1205715 	stw	r4,-32420(gp)
		aMinutes = 0;
   10550:	d0205a15 	stw	zero,-32408(gp)
	else if(aHours < 0){
			aHours = 23;
}else{
	displayHour(aHours,aMinutes);
}
	displayHour(aHours,aMinutes);
   10554:	d1605a17 	ldw	r5,-32408(gp)
   10558:	d1205717 	ldw	r4,-32420(gp)
   1055c:	00001306 	br	105ac <sumIndexAlarm+0x104>

	if (aMinutes >= 60){
		aHours++;
		aMinutes = 0;
}
	else if (aMinutes < 0){
   10560:	2800040e 	bge	r5,zero,10574 <sumIndexAlarm+0xcc>
			aHours--;
   10564:	213fffc4 	addi	r4,r4,-1
   10568:	d1205715 	stw	r4,-32420(gp)
			aMinutes = 59;
   1056c:	d0a05a15 	stw	r2,-32408(gp)
   10570:	003ff806 	br	10554 <__alt_data_end+0xffff6554>
}
	else if(aHours >= 24){
   10574:	008005c4 	movi	r2,23
   10578:	1100020e 	bge	r2,r4,10584 <sumIndexAlarm+0xdc>
		aHours = 0;
   1057c:	d0205715 	stw	zero,-32420(gp)
   10580:	003ff406 	br	10554 <__alt_data_end+0xffff6554>
}
	else if(aHours < 0){
   10584:	2000020e 	bge	r4,zero,10590 <sumIndexAlarm+0xe8>
			aHours = 23;
   10588:	d0a05715 	stw	r2,-32420(gp)
   1058c:	003ff106 	br	10554 <__alt_data_end+0xffff6554>
	}
	}

}

void sumIndexAlarm( int op){
   10590:	deffff04 	addi	sp,sp,-4
   10594:	dfc00015 	stw	ra,0(sp)
		aHours = 0;
}
	else if(aHours < 0){
			aHours = 23;
}else{
	displayHour(aHours,aMinutes);
   10598:	001024c0 	call	1024c <displayHour>
}
	displayHour(aHours,aMinutes);
   1059c:	d1605a17 	ldw	r5,-32408(gp)
   105a0:	d1205717 	ldw	r4,-32420(gp)


}
   105a4:	dfc00017 	ldw	ra,0(sp)
   105a8:	dec00104 	addi	sp,sp,4
	else if(aHours < 0){
			aHours = 23;
}else{
	displayHour(aHours,aMinutes);
}
	displayHour(aHours,aMinutes);
   105ac:	001024c1 	jmpi	1024c <displayHour>

000105b0 <alarmSetup>:


void alarmSetup(){
		indx = 0;
		int setup =1;
		if(isAlarmOn ==0){
   105b0:	d0a05e17 	ldw	r2,-32392(gp)
}




void alarmSetup(){
   105b4:	defffd04 	addi	sp,sp,-12
   105b8:	dfc00215 	stw	ra,8(sp)
   105bc:	dc400115 	stw	r17,4(sp)
   105c0:	dc000015 	stw	r16,0(sp)
		indx = 0;
   105c4:	d0205815 	stw	zero,-32416(gp)
		int setup =1;
		if(isAlarmOn ==0){
   105c8:	1000061e 	bne	r2,zero,105e4 <alarmSetup+0x34>
			aHours = hours;
   105cc:	d0a05f17 	ldw	r2,-32388(gp)
   105d0:	d0a05715 	stw	r2,-32420(gp)
			aMinutes = minutes;
   105d4:	d0a05d17 	ldw	r2,-32396(gp)
   105d8:	d0a05a15 	stw	r2,-32408(gp)
			isAlarmOn = 1;
   105dc:	00800044 	movi	r2,1
   105e0:	d0a05e15 	stw	r2,-32392(gp)

		}


		printf("setting up the Alarm");
   105e4:	01000074 	movhi	r4,1
   105e8:	21071f04 	addi	r4,r4,7292
   105ec:	001087c0 	call	1087c <printf>
							displayHour(aHours,aMinutes);
								}
						else if(*button1 == 0){

							sumIndexAlarm( 0);
							debounce = 2;
   105f0:	04000084 	movi	r16,2

						}
						else if(*button3 == 0){
							indx++;
							debounce = 2;
							if(indx >= 4){
   105f4:	044000c4 	movi	r17,3

		printf("setting up the Alarm");

			while(setup){

					if(debounce == 0){
   105f8:	d0a05917 	ldw	r2,-32412(gp)
   105fc:	1000251e 	bne	r2,zero,10694 <alarmSetup+0xe4>

						if(*button4 == 0){
   10600:	d0a00217 	ldw	r2,-32760(gp)
   10604:	1080000b 	ldhu	r2,0(r2)
   10608:	10bfffcc 	andi	r2,r2,65535
   1060c:	1000091e 	bne	r2,zero,10634 <alarmSetup+0x84>

							setup =0;
							debounce = 2;

							printf("setup finished");
   10610:	01000074 	movhi	r4,1
					if(debounce == 0){

						if(*button4 == 0){

							setup =0;
							debounce = 2;
   10614:	00800084 	movi	r2,2

							printf("setup finished");
   10618:	21072504 	addi	r4,r4,7316
					if(debounce == 0){

						if(*button4 == 0){

							setup =0;
							debounce = 2;
   1061c:	d0a05915 	stw	r2,-32412(gp)
					}




}
   10620:	dfc00217 	ldw	ra,8(sp)
   10624:	dc400117 	ldw	r17,4(sp)
   10628:	dc000017 	ldw	r16,0(sp)
   1062c:	dec00304 	addi	sp,sp,12
						if(*button4 == 0){

							setup =0;
							debounce = 2;

							printf("setup finished");
   10630:	001087c1 	jmpi	1087c <printf>

						}
						else if(*button3 == 0){
   10634:	d0a00317 	ldw	r2,-32756(gp)
   10638:	1080000b 	ldhu	r2,0(r2)
   1063c:	10bfffcc 	andi	r2,r2,65535
   10640:	1000071e 	bne	r2,zero,10660 <alarmSetup+0xb0>
							indx++;
   10644:	d0a05817 	ldw	r2,-32416(gp)
							debounce = 2;
   10648:	d4205915 	stw	r16,-32412(gp)

							printf("setup finished");

						}
						else if(*button3 == 0){
							indx++;
   1064c:	10800044 	addi	r2,r2,1
   10650:	d0a05815 	stw	r2,-32416(gp)
							debounce = 2;
							if(indx >= 4){
   10654:	88bfe80e 	bge	r17,r2,105f8 <__alt_data_end+0xffff65f8>
								indx =0;
   10658:	d0205815 	stw	zero,-32416(gp)
   1065c:	003fe606 	br	105f8 <__alt_data_end+0xffff65f8>
							}

						}
						else if(*button2 == 0){
   10660:	d0a00417 	ldw	r2,-32752(gp)
   10664:	1080000b 	ldhu	r2,0(r2)
   10668:	10bfffcc 	andi	r2,r2,65535
   1066c:	1000021e 	bne	r2,zero,10678 <alarmSetup+0xc8>

							sumIndexAlarm(  1);
   10670:	01000044 	movi	r4,1
   10674:	00000506 	br	1068c <alarmSetup+0xdc>
							debounce = 2;
							displayHour(aHours,aMinutes);
								}
						else if(*button1 == 0){
   10678:	d0a00517 	ldw	r2,-32748(gp)
   1067c:	1080000b 	ldhu	r2,0(r2)
   10680:	10bfffcc 	andi	r2,r2,65535
   10684:	1000031e 	bne	r2,zero,10694 <alarmSetup+0xe4>

							sumIndexAlarm( 0);
   10688:	0009883a 	mov	r4,zero
   1068c:	00104a80 	call	104a8 <sumIndexAlarm>
							debounce = 2;
   10690:	d4205915 	stw	r16,-32412(gp)
							displayHour(aHours,aMinutes);
							}
						else{
							displayHour(aHours,aMinutes);
   10694:	d1605a17 	ldw	r5,-32408(gp)
   10698:	d1205717 	ldw	r4,-32420(gp)
   1069c:	001024c0 	call	1024c <displayHour>
   106a0:	003fd506 	br	105f8 <__alt_data_end+0xffff65f8>

000106a4 <clockSetup>:

void clockSetup(){
	indx = 0;
	int setup =1;

	printf("setting up the clock...");
   106a4:	01000074 	movhi	r4,1
	displayHour(aHours,aMinutes);


}

void clockSetup(){
   106a8:	defffd04 	addi	sp,sp,-12
	indx = 0;
	int setup =1;

	printf("setting up the clock...");
   106ac:	21072904 	addi	r4,r4,7332
	displayHour(aHours,aMinutes);


}

void clockSetup(){
   106b0:	dc400115 	stw	r17,4(sp)
   106b4:	dc000015 	stw	r16,0(sp)
   106b8:	dfc00215 	stw	ra,8(sp)
	indx = 0;
   106bc:	d0205815 	stw	zero,-32416(gp)
			checkClock();
				}
		else if(*button1 == 0){

			sumIndex( 0);
			debounce = 2;
   106c0:	04000084 	movi	r16,2

void clockSetup(){
	indx = 0;
	int setup =1;

	printf("setting up the clock...");
   106c4:	001087c0 	call	1087c <printf>

		}
		else if(*button3 == 0){
			indx++;
			debounce = 2;
			if(indx > 3){
   106c8:	044000c4 	movi	r17,3

	printf("setting up the clock...");

	while(setup){

		if(debounce == 0){
   106cc:	d0a05917 	ldw	r2,-32412(gp)
   106d0:	1000281e 	bne	r2,zero,10774 <clockSetup+0xd0>

		if(*button4 == 0){
   106d4:	d0a00217 	ldw	r2,-32760(gp)
   106d8:	1080000b 	ldhu	r2,0(r2)
   106dc:	10bfffcc 	andi	r2,r2,65535
   106e0:	10000c1e 	bne	r2,zero,10714 <clockSetup+0x70>

			setup =0;
			debounce = 2;
			printf("setup finished");
   106e4:	01000074 	movhi	r4,1
		if(debounce == 0){

		if(*button4 == 0){

			setup =0;
			debounce = 2;
   106e8:	00800084 	movi	r2,2
			printf("setup finished");
   106ec:	21072504 	addi	r4,r4,7316
		if(debounce == 0){

		if(*button4 == 0){

			setup =0;
			debounce = 2;
   106f0:	d0a05915 	stw	r2,-32412(gp)
			printf("setup finished");
   106f4:	001087c0 	call	1087c <printf>
			if(isAlarmOn){
   106f8:	d0a05e17 	ldw	r2,-32392(gp)
   106fc:	10001f26 	beq	r2,zero,1077c <clockSetup+0xd8>
			checkClock();
		}

	}

}
   10700:	dfc00217 	ldw	ra,8(sp)
   10704:	dc400117 	ldw	r17,4(sp)
   10708:	dc000017 	ldw	r16,0(sp)
   1070c:	dec00304 	addi	sp,sp,12

			setup =0;
			debounce = 2;
			printf("setup finished");
			if(isAlarmOn){
				alarmSetup();
   10710:	00105b01 	jmpi	105b0 <alarmSetup>
			}

		}
		else if(*button3 == 0){
   10714:	d0a00317 	ldw	r2,-32756(gp)
   10718:	1080000b 	ldhu	r2,0(r2)
   1071c:	10bfffcc 	andi	r2,r2,65535
   10720:	1000071e 	bne	r2,zero,10740 <clockSetup+0x9c>
			indx++;
   10724:	d0a05817 	ldw	r2,-32416(gp)
			debounce = 2;
   10728:	d4205915 	stw	r16,-32412(gp)
				alarmSetup();
			}

		}
		else if(*button3 == 0){
			indx++;
   1072c:	10800044 	addi	r2,r2,1
   10730:	d0a05815 	stw	r2,-32416(gp)
			debounce = 2;
			if(indx > 3){
   10734:	88bfe50e 	bge	r17,r2,106cc <__alt_data_end+0xffff66cc>
				indx =0;
   10738:	d0205815 	stw	zero,-32416(gp)
   1073c:	003fe306 	br	106cc <__alt_data_end+0xffff66cc>
			}
		}
		else if(*button2 == 0){
   10740:	d0a00417 	ldw	r2,-32752(gp)
   10744:	1080000b 	ldhu	r2,0(r2)
   10748:	10bfffcc 	andi	r2,r2,65535
   1074c:	1000031e 	bne	r2,zero,1075c <clockSetup+0xb8>

			sumIndex( 1);
   10750:	01000044 	movi	r4,1
   10754:	001043c0 	call	1043c <sumIndex>
   10758:	00000506 	br	10770 <clockSetup+0xcc>
			debounce = 2;
			checkClock();
				}
		else if(*button1 == 0){
   1075c:	d0a00517 	ldw	r2,-32748(gp)
   10760:	1080000b 	ldhu	r2,0(r2)
   10764:	10bfffcc 	andi	r2,r2,65535
   10768:	103fd81e 	bne	r2,zero,106cc <__alt_data_end+0xffff66cc>
   1076c:	00101bc0 	call	101bc <sumIndex.part.1>

			sumIndex( 0);
			debounce = 2;
   10770:	d4205915 	stw	r16,-32412(gp)
			checkClock();
			}
		}
		else{
			checkClock();
   10774:	00103500 	call	10350 <checkClock>
   10778:	003fd406 	br	106cc <__alt_data_end+0xffff66cc>
		}

	}

}
   1077c:	dfc00217 	ldw	ra,8(sp)
   10780:	dc400117 	ldw	r17,4(sp)
   10784:	dc000017 	ldw	r16,0(sp)
   10788:	dec00304 	addi	sp,sp,12
   1078c:	f800283a 	ret

00010790 <main>:


}

int main()
{ 
   10790:	defffd04 	addi	sp,sp,-12
   10794:	dfc00215 	stw	ra,8(sp)
   10798:	dc400115 	stw	r17,4(sp)
   1079c:	dc000015 	stw	r16,0(sp)
  //alt_putstr("Hello from Nios II!\n");

	init_timer_interrupt();
   107a0:	00102dc0 	call	102dc <init_timer_interrupt>
		hours = 0;
		minutes = 0;
		seconds = 0;
		debounce = 0;
		isAlarmOn = 0;
		*buzzer = 0b00;
   107a4:	d0a00017 	ldw	r2,-32768(gp)


  /* Event loop never exits. */


		hours = 0;
   107a8:	d0205f15 	stw	zero,-32388(gp)
		minutes = 0;
   107ac:	d0205d15 	stw	zero,-32396(gp)
		seconds = 0;
   107b0:	d0205c15 	stw	zero,-32400(gp)
		debounce = 0;
   107b4:	d0205915 	stw	zero,-32412(gp)
		isAlarmOn = 0;
   107b8:	d0205e15 	stw	zero,-32392(gp)
		*buzzer = 0b00;
   107bc:	1000000d 	sth	zero,0(r2)

		displayHour(hours,minutes);
   107c0:	000b883a 	mov	r5,zero
   107c4:	0009883a 	mov	r4,zero
   107c8:	001024c0 	call	1024c <displayHour>
	    	  }
	  else if(*alarm1 != 0){

		  if(isAlarmOn==0){
			  alarmSetup();
			  isAlarmOn = 1;
   107cc:	04400044 	movi	r17,1
			  debounce =2;
   107d0:	04000084 	movi	r16,2
		displayHour(hours,minutes);


  while (1){

	  if(debounce == 0){
   107d4:	d0a05917 	ldw	r2,-32412(gp)
   107d8:	1000171e 	bne	r2,zero,10838 <main+0xa8>

	  if (*button4 == 0){
   107dc:	d0a00217 	ldw	r2,-32760(gp)
   107e0:	1080000b 	ldhu	r2,0(r2)
   107e4:	10bfffcc 	andi	r2,r2,65535
   107e8:	1000031e 	bne	r2,zero,107f8 <main+0x68>
		  debounce = 2;
   107ec:	d4205915 	stw	r16,-32412(gp)
		  //printf("debounce2: %d",debounce);
		  clockSetup();
   107f0:	00106a40 	call	106a4 <clockSetup>
   107f4:	00001006 	br	10838 <main+0xa8>


	    	  }
	  else if(*alarm1 != 0){
   107f8:	d0e00117 	ldw	r3,-32764(gp)
   107fc:	1880000b 	ldhu	r2,0(r3)
   10800:	10bfffcc 	andi	r2,r2,65535
   10804:	10000626 	beq	r2,zero,10820 <main+0x90>

		  if(isAlarmOn==0){
   10808:	d0a05e17 	ldw	r2,-32392(gp)
   1080c:	10000a1e 	bne	r2,zero,10838 <main+0xa8>
			  alarmSetup();
   10810:	00105b00 	call	105b0 <alarmSetup>
			  isAlarmOn = 1;
   10814:	d4605e15 	stw	r17,-32392(gp)
			  debounce =2;
   10818:	d4205915 	stw	r16,-32412(gp)
   1081c:	00000606 	br	10838 <main+0xa8>
		  }

	  }else if(*alarm1 == 0){
   10820:	1880000b 	ldhu	r2,0(r3)
   10824:	10bfffcc 	andi	r2,r2,65535
   10828:	1000031e 	bne	r2,zero,10838 <main+0xa8>
		  isAlarmOn = 0;
		  *buzzer = 0b00;
   1082c:	d0a00017 	ldw	r2,-32768(gp)
			  isAlarmOn = 1;
			  debounce =2;
		  }

	  }else if(*alarm1 == 0){
		  isAlarmOn = 0;
   10830:	d0205e15 	stw	zero,-32392(gp)
		  *buzzer = 0b00;
   10834:	1000000d 	sth	zero,0(r2)
	  }
	  }

	  checkClock();
   10838:	00103500 	call	10350 <checkClock>


  }
   1083c:	003fe506 	br	107d4 <__alt_data_end+0xffff67d4>

00010840 <_printf_r>:
   10840:	defffd04 	addi	sp,sp,-12
   10844:	dfc00015 	stw	ra,0(sp)
   10848:	d9800115 	stw	r6,4(sp)
   1084c:	d9c00215 	stw	r7,8(sp)
   10850:	20c00217 	ldw	r3,8(r4)
   10854:	01800074 	movhi	r6,1
   10858:	31854304 	addi	r6,r6,5388
   1085c:	19800115 	stw	r6,4(r3)
   10860:	280d883a 	mov	r6,r5
   10864:	21400217 	ldw	r5,8(r4)
   10868:	d9c00104 	addi	r7,sp,4
   1086c:	0010fc40 	call	10fc4 <___vfprintf_internal_r>
   10870:	dfc00017 	ldw	ra,0(sp)
   10874:	dec00304 	addi	sp,sp,12
   10878:	f800283a 	ret

0001087c <printf>:
   1087c:	defffc04 	addi	sp,sp,-16
   10880:	dfc00015 	stw	ra,0(sp)
   10884:	d9400115 	stw	r5,4(sp)
   10888:	d9800215 	stw	r6,8(sp)
   1088c:	d9c00315 	stw	r7,12(sp)
   10890:	00800074 	movhi	r2,1
   10894:	10877504 	addi	r2,r2,7636
   10898:	10800017 	ldw	r2,0(r2)
   1089c:	01400074 	movhi	r5,1
   108a0:	29454304 	addi	r5,r5,5388
   108a4:	10c00217 	ldw	r3,8(r2)
   108a8:	d9800104 	addi	r6,sp,4
   108ac:	19400115 	stw	r5,4(r3)
   108b0:	200b883a 	mov	r5,r4
   108b4:	11000217 	ldw	r4,8(r2)
   108b8:	00114f00 	call	114f0 <__vfprintf_internal>
   108bc:	dfc00017 	ldw	ra,0(sp)
   108c0:	dec00404 	addi	sp,sp,16
   108c4:	f800283a 	ret

000108c8 <_sprintf_r>:
   108c8:	defff704 	addi	sp,sp,-36
   108cc:	dfc00715 	stw	ra,28(sp)
   108d0:	d9c00815 	stw	r7,32(sp)
   108d4:	00808204 	movi	r2,520
   108d8:	d880000d 	sth	r2,0(sp)
   108dc:	00a00034 	movhi	r2,32768
   108e0:	10bfffc4 	addi	r2,r2,-1
   108e4:	d8800515 	stw	r2,20(sp)
   108e8:	d8800315 	stw	r2,12(sp)
   108ec:	00bfffc4 	movi	r2,-1
   108f0:	d880008d 	sth	r2,2(sp)
   108f4:	00800074 	movhi	r2,1
   108f8:	d9400415 	stw	r5,16(sp)
   108fc:	d9400215 	stw	r5,8(sp)
   10900:	10857104 	addi	r2,r2,5572
   10904:	d9c00804 	addi	r7,sp,32
   10908:	d80b883a 	mov	r5,sp
   1090c:	d8800115 	stw	r2,4(sp)
   10910:	d8000615 	stw	zero,24(sp)
   10914:	0010a100 	call	10a10 <___svfprintf_internal_r>
   10918:	d8c00417 	ldw	r3,16(sp)
   1091c:	18000005 	stb	zero,0(r3)
   10920:	dfc00717 	ldw	ra,28(sp)
   10924:	dec00904 	addi	sp,sp,36
   10928:	f800283a 	ret

0001092c <sprintf>:
   1092c:	defff604 	addi	sp,sp,-40
   10930:	dfc00715 	stw	ra,28(sp)
   10934:	d9800815 	stw	r6,32(sp)
   10938:	d9c00915 	stw	r7,36(sp)
   1093c:	00808204 	movi	r2,520
   10940:	d880000d 	sth	r2,0(sp)
   10944:	00a00034 	movhi	r2,32768
   10948:	10bfffc4 	addi	r2,r2,-1
   1094c:	d8800515 	stw	r2,20(sp)
   10950:	d8800315 	stw	r2,12(sp)
   10954:	00bfffc4 	movi	r2,-1
   10958:	d880008d 	sth	r2,2(sp)
   1095c:	00800074 	movhi	r2,1
   10960:	10857104 	addi	r2,r2,5572
   10964:	d8800115 	stw	r2,4(sp)
   10968:	00800074 	movhi	r2,1
   1096c:	10877504 	addi	r2,r2,7636
   10970:	d9000415 	stw	r4,16(sp)
   10974:	d9000215 	stw	r4,8(sp)
   10978:	11000017 	ldw	r4,0(r2)
   1097c:	280d883a 	mov	r6,r5
   10980:	d9c00804 	addi	r7,sp,32
   10984:	d80b883a 	mov	r5,sp
   10988:	d8000615 	stw	zero,24(sp)
   1098c:	0010a100 	call	10a10 <___svfprintf_internal_r>
   10990:	d8c00417 	ldw	r3,16(sp)
   10994:	18000005 	stb	zero,0(r3)
   10998:	dfc00717 	ldw	ra,28(sp)
   1099c:	dec00a04 	addi	sp,sp,40
   109a0:	f800283a 	ret

000109a4 <print_repeat>:
   109a4:	defffb04 	addi	sp,sp,-20
   109a8:	dc800315 	stw	r18,12(sp)
   109ac:	dc400215 	stw	r17,8(sp)
   109b0:	dc000115 	stw	r16,4(sp)
   109b4:	dfc00415 	stw	ra,16(sp)
   109b8:	2025883a 	mov	r18,r4
   109bc:	2823883a 	mov	r17,r5
   109c0:	d9800005 	stb	r6,0(sp)
   109c4:	3821883a 	mov	r16,r7
   109c8:	04000a0e 	bge	zero,r16,109f4 <print_repeat+0x50>
   109cc:	88800117 	ldw	r2,4(r17)
   109d0:	01c00044 	movi	r7,1
   109d4:	d80d883a 	mov	r6,sp
   109d8:	880b883a 	mov	r5,r17
   109dc:	9009883a 	mov	r4,r18
   109e0:	103ee83a 	callr	r2
   109e4:	843fffc4 	addi	r16,r16,-1
   109e8:	103ff726 	beq	r2,zero,109c8 <__alt_data_end+0xffff69c8>
   109ec:	00bfffc4 	movi	r2,-1
   109f0:	00000106 	br	109f8 <print_repeat+0x54>
   109f4:	0005883a 	mov	r2,zero
   109f8:	dfc00417 	ldw	ra,16(sp)
   109fc:	dc800317 	ldw	r18,12(sp)
   10a00:	dc400217 	ldw	r17,8(sp)
   10a04:	dc000117 	ldw	r16,4(sp)
   10a08:	dec00504 	addi	sp,sp,20
   10a0c:	f800283a 	ret

00010a10 <___svfprintf_internal_r>:
   10a10:	deffe504 	addi	sp,sp,-108
   10a14:	d8c00804 	addi	r3,sp,32
   10a18:	ddc01815 	stw	r23,96(sp)
   10a1c:	dd801715 	stw	r22,92(sp)
   10a20:	dd401615 	stw	r21,88(sp)
   10a24:	dd001515 	stw	r20,84(sp)
   10a28:	dcc01415 	stw	r19,80(sp)
   10a2c:	dc801315 	stw	r18,76(sp)
   10a30:	dc401215 	stw	r17,72(sp)
   10a34:	dc001115 	stw	r16,68(sp)
   10a38:	dfc01a15 	stw	ra,104(sp)
   10a3c:	df001915 	stw	fp,100(sp)
   10a40:	2029883a 	mov	r20,r4
   10a44:	2823883a 	mov	r17,r5
   10a48:	382d883a 	mov	r22,r7
   10a4c:	d9800f15 	stw	r6,60(sp)
   10a50:	0021883a 	mov	r16,zero
   10a54:	d8000e15 	stw	zero,56(sp)
   10a58:	d8000a15 	stw	zero,40(sp)
   10a5c:	002b883a 	mov	r21,zero
   10a60:	0027883a 	mov	r19,zero
   10a64:	0025883a 	mov	r18,zero
   10a68:	d8000c15 	stw	zero,48(sp)
   10a6c:	d8000b15 	stw	zero,44(sp)
   10a70:	002f883a 	mov	r23,zero
   10a74:	d8c00915 	stw	r3,36(sp)
   10a78:	d8c00f17 	ldw	r3,60(sp)
   10a7c:	19000003 	ldbu	r4,0(r3)
   10a80:	20803fcc 	andi	r2,r4,255
   10a84:	1080201c 	xori	r2,r2,128
   10a88:	10bfe004 	addi	r2,r2,-128
   10a8c:	10011e26 	beq	r2,zero,10f08 <___svfprintf_internal_r+0x4f8>
   10a90:	00c00044 	movi	r3,1
   10a94:	b8c01426 	beq	r23,r3,10ae8 <___svfprintf_internal_r+0xd8>
   10a98:	1dc00216 	blt	r3,r23,10aa4 <___svfprintf_internal_r+0x94>
   10a9c:	b8000626 	beq	r23,zero,10ab8 <___svfprintf_internal_r+0xa8>
   10aa0:	00011506 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10aa4:	01400084 	movi	r5,2
   10aa8:	b9401d26 	beq	r23,r5,10b20 <___svfprintf_internal_r+0x110>
   10aac:	014000c4 	movi	r5,3
   10ab0:	b9402b26 	beq	r23,r5,10b60 <___svfprintf_internal_r+0x150>
   10ab4:	00011006 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10ab8:	01400944 	movi	r5,37
   10abc:	1140fc26 	beq	r2,r5,10eb0 <___svfprintf_internal_r+0x4a0>
   10ac0:	88800117 	ldw	r2,4(r17)
   10ac4:	d9000005 	stb	r4,0(sp)
   10ac8:	01c00044 	movi	r7,1
   10acc:	d80d883a 	mov	r6,sp
   10ad0:	880b883a 	mov	r5,r17
   10ad4:	a009883a 	mov	r4,r20
   10ad8:	103ee83a 	callr	r2
   10adc:	1000d81e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10ae0:	84000044 	addi	r16,r16,1
   10ae4:	00010406 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10ae8:	01400c04 	movi	r5,48
   10aec:	1140fa26 	beq	r2,r5,10ed8 <___svfprintf_internal_r+0x4c8>
   10af0:	01400944 	movi	r5,37
   10af4:	11400a1e 	bne	r2,r5,10b20 <___svfprintf_internal_r+0x110>
   10af8:	d8800005 	stb	r2,0(sp)
   10afc:	88800117 	ldw	r2,4(r17)
   10b00:	b80f883a 	mov	r7,r23
   10b04:	d80d883a 	mov	r6,sp
   10b08:	880b883a 	mov	r5,r17
   10b0c:	a009883a 	mov	r4,r20
   10b10:	103ee83a 	callr	r2
   10b14:	1000ca1e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10b18:	84000044 	addi	r16,r16,1
   10b1c:	0000f506 	br	10ef4 <___svfprintf_internal_r+0x4e4>
   10b20:	25fff404 	addi	r23,r4,-48
   10b24:	bdc03fcc 	andi	r23,r23,255
   10b28:	00c00244 	movi	r3,9
   10b2c:	1dc00936 	bltu	r3,r23,10b54 <___svfprintf_internal_r+0x144>
   10b30:	00bfffc4 	movi	r2,-1
   10b34:	90800426 	beq	r18,r2,10b48 <___svfprintf_internal_r+0x138>
   10b38:	01400284 	movi	r5,10
   10b3c:	9009883a 	mov	r4,r18
   10b40:	00118f40 	call	118f4 <__mulsi3>
   10b44:	00000106 	br	10b4c <___svfprintf_internal_r+0x13c>
   10b48:	0005883a 	mov	r2,zero
   10b4c:	b8a5883a 	add	r18,r23,r2
   10b50:	0000e206 	br	10edc <___svfprintf_internal_r+0x4cc>
   10b54:	01400b84 	movi	r5,46
   10b58:	1140e426 	beq	r2,r5,10eec <___svfprintf_internal_r+0x4dc>
   10b5c:	05c00084 	movi	r23,2
   10b60:	213ff404 	addi	r4,r4,-48
   10b64:	27003fcc 	andi	fp,r4,255
   10b68:	00c00244 	movi	r3,9
   10b6c:	1f000936 	bltu	r3,fp,10b94 <___svfprintf_internal_r+0x184>
   10b70:	00bfffc4 	movi	r2,-1
   10b74:	98800426 	beq	r19,r2,10b88 <___svfprintf_internal_r+0x178>
   10b78:	01400284 	movi	r5,10
   10b7c:	9809883a 	mov	r4,r19
   10b80:	00118f40 	call	118f4 <__mulsi3>
   10b84:	00000106 	br	10b8c <___svfprintf_internal_r+0x17c>
   10b88:	0005883a 	mov	r2,zero
   10b8c:	e0a7883a 	add	r19,fp,r2
   10b90:	0000d906 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10b94:	00c01b04 	movi	r3,108
   10b98:	10c0d226 	beq	r2,r3,10ee4 <___svfprintf_internal_r+0x4d4>
   10b9c:	013fffc4 	movi	r4,-1
   10ba0:	99000226 	beq	r19,r4,10bac <___svfprintf_internal_r+0x19c>
   10ba4:	d8000b15 	stw	zero,44(sp)
   10ba8:	00000106 	br	10bb0 <___svfprintf_internal_r+0x1a0>
   10bac:	04c00044 	movi	r19,1
   10bb0:	01001a44 	movi	r4,105
   10bb4:	11001626 	beq	r2,r4,10c10 <___svfprintf_internal_r+0x200>
   10bb8:	20800916 	blt	r4,r2,10be0 <___svfprintf_internal_r+0x1d0>
   10bbc:	010018c4 	movi	r4,99
   10bc0:	11008826 	beq	r2,r4,10de4 <___svfprintf_internal_r+0x3d4>
   10bc4:	01001904 	movi	r4,100
   10bc8:	11001126 	beq	r2,r4,10c10 <___svfprintf_internal_r+0x200>
   10bcc:	01001604 	movi	r4,88
   10bd0:	1100c81e 	bne	r2,r4,10ef4 <___svfprintf_internal_r+0x4e4>
   10bd4:	00c00044 	movi	r3,1
   10bd8:	d8c00e15 	stw	r3,56(sp)
   10bdc:	00001506 	br	10c34 <___svfprintf_internal_r+0x224>
   10be0:	01001cc4 	movi	r4,115
   10be4:	11009826 	beq	r2,r4,10e48 <___svfprintf_internal_r+0x438>
   10be8:	20800416 	blt	r4,r2,10bfc <___svfprintf_internal_r+0x1ec>
   10bec:	01001bc4 	movi	r4,111
   10bf0:	1100c01e 	bne	r2,r4,10ef4 <___svfprintf_internal_r+0x4e4>
   10bf4:	05400204 	movi	r21,8
   10bf8:	00000f06 	br	10c38 <___svfprintf_internal_r+0x228>
   10bfc:	01001d44 	movi	r4,117
   10c00:	11000d26 	beq	r2,r4,10c38 <___svfprintf_internal_r+0x228>
   10c04:	01001e04 	movi	r4,120
   10c08:	11000a26 	beq	r2,r4,10c34 <___svfprintf_internal_r+0x224>
   10c0c:	0000b906 	br	10ef4 <___svfprintf_internal_r+0x4e4>
   10c10:	d8c00a17 	ldw	r3,40(sp)
   10c14:	b7000104 	addi	fp,r22,4
   10c18:	18000726 	beq	r3,zero,10c38 <___svfprintf_internal_r+0x228>
   10c1c:	df000d15 	stw	fp,52(sp)
   10c20:	b5c00017 	ldw	r23,0(r22)
   10c24:	b800080e 	bge	r23,zero,10c48 <___svfprintf_internal_r+0x238>
   10c28:	05efc83a 	sub	r23,zero,r23
   10c2c:	02400044 	movi	r9,1
   10c30:	00000606 	br	10c4c <___svfprintf_internal_r+0x23c>
   10c34:	05400404 	movi	r21,16
   10c38:	b0c00104 	addi	r3,r22,4
   10c3c:	d8c00d15 	stw	r3,52(sp)
   10c40:	b5c00017 	ldw	r23,0(r22)
   10c44:	d8000a15 	stw	zero,40(sp)
   10c48:	0013883a 	mov	r9,zero
   10c4c:	d839883a 	mov	fp,sp
   10c50:	b8001726 	beq	r23,zero,10cb0 <___svfprintf_internal_r+0x2a0>
   10c54:	a80b883a 	mov	r5,r21
   10c58:	b809883a 	mov	r4,r23
   10c5c:	da401015 	stw	r9,64(sp)
   10c60:	00118380 	call	11838 <__udivsi3>
   10c64:	a80b883a 	mov	r5,r21
   10c68:	1009883a 	mov	r4,r2
   10c6c:	102d883a 	mov	r22,r2
   10c70:	00118f40 	call	118f4 <__mulsi3>
   10c74:	b885c83a 	sub	r2,r23,r2
   10c78:	00c00244 	movi	r3,9
   10c7c:	da401017 	ldw	r9,64(sp)
   10c80:	18800216 	blt	r3,r2,10c8c <___svfprintf_internal_r+0x27c>
   10c84:	10800c04 	addi	r2,r2,48
   10c88:	00000506 	br	10ca0 <___svfprintf_internal_r+0x290>
   10c8c:	d8c00e17 	ldw	r3,56(sp)
   10c90:	18000226 	beq	r3,zero,10c9c <___svfprintf_internal_r+0x28c>
   10c94:	10800dc4 	addi	r2,r2,55
   10c98:	00000106 	br	10ca0 <___svfprintf_internal_r+0x290>
   10c9c:	108015c4 	addi	r2,r2,87
   10ca0:	e0800005 	stb	r2,0(fp)
   10ca4:	b02f883a 	mov	r23,r22
   10ca8:	e7000044 	addi	fp,fp,1
   10cac:	003fe806 	br	10c50 <__alt_data_end+0xffff6c50>
   10cb0:	e6efc83a 	sub	r23,fp,sp
   10cb4:	9dc5c83a 	sub	r2,r19,r23
   10cb8:	0080090e 	bge	zero,r2,10ce0 <___svfprintf_internal_r+0x2d0>
   10cbc:	e085883a 	add	r2,fp,r2
   10cc0:	01400c04 	movi	r5,48
   10cc4:	d8c00917 	ldw	r3,36(sp)
   10cc8:	e009883a 	mov	r4,fp
   10ccc:	e0c0032e 	bgeu	fp,r3,10cdc <___svfprintf_internal_r+0x2cc>
   10cd0:	e7000044 	addi	fp,fp,1
   10cd4:	21400005 	stb	r5,0(r4)
   10cd8:	e0bffa1e 	bne	fp,r2,10cc4 <__alt_data_end+0xffff6cc4>
   10cdc:	e6efc83a 	sub	r23,fp,sp
   10ce0:	d8c00b17 	ldw	r3,44(sp)
   10ce4:	4dd1883a 	add	r8,r9,r23
   10ce8:	922dc83a 	sub	r22,r18,r8
   10cec:	18001626 	beq	r3,zero,10d48 <___svfprintf_internal_r+0x338>
   10cf0:	48000a26 	beq	r9,zero,10d1c <___svfprintf_internal_r+0x30c>
   10cf4:	00800b44 	movi	r2,45
   10cf8:	d8800805 	stb	r2,32(sp)
   10cfc:	88800117 	ldw	r2,4(r17)
   10d00:	01c00044 	movi	r7,1
   10d04:	d9800804 	addi	r6,sp,32
   10d08:	880b883a 	mov	r5,r17
   10d0c:	a009883a 	mov	r4,r20
   10d10:	103ee83a 	callr	r2
   10d14:	10004a1e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10d18:	84000044 	addi	r16,r16,1
   10d1c:	0580070e 	bge	zero,r22,10d3c <___svfprintf_internal_r+0x32c>
   10d20:	b00f883a 	mov	r7,r22
   10d24:	01800c04 	movi	r6,48
   10d28:	880b883a 	mov	r5,r17
   10d2c:	a009883a 	mov	r4,r20
   10d30:	00109a40 	call	109a4 <print_repeat>
   10d34:	1000421e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10d38:	85a1883a 	add	r16,r16,r22
   10d3c:	e02d883a 	mov	r22,fp
   10d40:	bf2fc83a 	sub	r23,r23,fp
   10d44:	00002006 	br	10dc8 <___svfprintf_internal_r+0x3b8>
   10d48:	0580090e 	bge	zero,r22,10d70 <___svfprintf_internal_r+0x360>
   10d4c:	b00f883a 	mov	r7,r22
   10d50:	01800804 	movi	r6,32
   10d54:	880b883a 	mov	r5,r17
   10d58:	a009883a 	mov	r4,r20
   10d5c:	da401015 	stw	r9,64(sp)
   10d60:	00109a40 	call	109a4 <print_repeat>
   10d64:	da401017 	ldw	r9,64(sp)
   10d68:	1000351e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10d6c:	85a1883a 	add	r16,r16,r22
   10d70:	483ff226 	beq	r9,zero,10d3c <__alt_data_end+0xffff6d3c>
   10d74:	00800b44 	movi	r2,45
   10d78:	d8800805 	stb	r2,32(sp)
   10d7c:	88800117 	ldw	r2,4(r17)
   10d80:	01c00044 	movi	r7,1
   10d84:	d9800804 	addi	r6,sp,32
   10d88:	880b883a 	mov	r5,r17
   10d8c:	a009883a 	mov	r4,r20
   10d90:	103ee83a 	callr	r2
   10d94:	10002a1e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10d98:	84000044 	addi	r16,r16,1
   10d9c:	003fe706 	br	10d3c <__alt_data_end+0xffff6d3c>
   10da0:	b5bfffc4 	addi	r22,r22,-1
   10da4:	b0800003 	ldbu	r2,0(r22)
   10da8:	01c00044 	movi	r7,1
   10dac:	d9800804 	addi	r6,sp,32
   10db0:	d8800805 	stb	r2,32(sp)
   10db4:	88800117 	ldw	r2,4(r17)
   10db8:	880b883a 	mov	r5,r17
   10dbc:	a009883a 	mov	r4,r20
   10dc0:	103ee83a 	callr	r2
   10dc4:	10001e1e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10dc8:	8585c83a 	sub	r2,r16,r22
   10dcc:	b5c9883a 	add	r4,r22,r23
   10dd0:	e085883a 	add	r2,fp,r2
   10dd4:	013ff216 	blt	zero,r4,10da0 <__alt_data_end+0xffff6da0>
   10dd8:	1021883a 	mov	r16,r2
   10ddc:	dd800d17 	ldw	r22,52(sp)
   10de0:	00004406 	br	10ef4 <___svfprintf_internal_r+0x4e4>
   10de4:	00800044 	movi	r2,1
   10de8:	1480080e 	bge	r2,r18,10e0c <___svfprintf_internal_r+0x3fc>
   10dec:	95ffffc4 	addi	r23,r18,-1
   10df0:	b80f883a 	mov	r7,r23
   10df4:	01800804 	movi	r6,32
   10df8:	880b883a 	mov	r5,r17
   10dfc:	a009883a 	mov	r4,r20
   10e00:	00109a40 	call	109a4 <print_repeat>
   10e04:	10000e1e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10e08:	85e1883a 	add	r16,r16,r23
   10e0c:	b0800017 	ldw	r2,0(r22)
   10e10:	01c00044 	movi	r7,1
   10e14:	d80d883a 	mov	r6,sp
   10e18:	d8800005 	stb	r2,0(sp)
   10e1c:	88800117 	ldw	r2,4(r17)
   10e20:	880b883a 	mov	r5,r17
   10e24:	a009883a 	mov	r4,r20
   10e28:	b5c00104 	addi	r23,r22,4
   10e2c:	103ee83a 	callr	r2
   10e30:	1000031e 	bne	r2,zero,10e40 <___svfprintf_internal_r+0x430>
   10e34:	84000044 	addi	r16,r16,1
   10e38:	b82d883a 	mov	r22,r23
   10e3c:	00002d06 	br	10ef4 <___svfprintf_internal_r+0x4e4>
   10e40:	00bfffc4 	movi	r2,-1
   10e44:	00003106 	br	10f0c <___svfprintf_internal_r+0x4fc>
   10e48:	b5c00017 	ldw	r23,0(r22)
   10e4c:	b7000104 	addi	fp,r22,4
   10e50:	b809883a 	mov	r4,r23
   10e54:	00116cc0 	call	116cc <strlen>
   10e58:	9091c83a 	sub	r8,r18,r2
   10e5c:	102d883a 	mov	r22,r2
   10e60:	0200090e 	bge	zero,r8,10e88 <___svfprintf_internal_r+0x478>
   10e64:	400f883a 	mov	r7,r8
   10e68:	01800804 	movi	r6,32
   10e6c:	880b883a 	mov	r5,r17
   10e70:	a009883a 	mov	r4,r20
   10e74:	da001015 	stw	r8,64(sp)
   10e78:	00109a40 	call	109a4 <print_repeat>
   10e7c:	da001017 	ldw	r8,64(sp)
   10e80:	103fef1e 	bne	r2,zero,10e40 <__alt_data_end+0xffff6e40>
   10e84:	8221883a 	add	r16,r16,r8
   10e88:	88800117 	ldw	r2,4(r17)
   10e8c:	b00f883a 	mov	r7,r22
   10e90:	b80d883a 	mov	r6,r23
   10e94:	880b883a 	mov	r5,r17
   10e98:	a009883a 	mov	r4,r20
   10e9c:	103ee83a 	callr	r2
   10ea0:	103fe71e 	bne	r2,zero,10e40 <__alt_data_end+0xffff6e40>
   10ea4:	85a1883a 	add	r16,r16,r22
   10ea8:	e02d883a 	mov	r22,fp
   10eac:	00001106 	br	10ef4 <___svfprintf_internal_r+0x4e4>
   10eb0:	00c00044 	movi	r3,1
   10eb4:	04ffffc4 	movi	r19,-1
   10eb8:	d8000e15 	stw	zero,56(sp)
   10ebc:	d8c00a15 	stw	r3,40(sp)
   10ec0:	05400284 	movi	r21,10
   10ec4:	9825883a 	mov	r18,r19
   10ec8:	d8000c15 	stw	zero,48(sp)
   10ecc:	d8000b15 	stw	zero,44(sp)
   10ed0:	182f883a 	mov	r23,r3
   10ed4:	00000806 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10ed8:	ddc00b15 	stw	r23,44(sp)
   10edc:	05c00084 	movi	r23,2
   10ee0:	00000506 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10ee4:	00c00044 	movi	r3,1
   10ee8:	d8c00c15 	stw	r3,48(sp)
   10eec:	05c000c4 	movi	r23,3
   10ef0:	00000106 	br	10ef8 <___svfprintf_internal_r+0x4e8>
   10ef4:	002f883a 	mov	r23,zero
   10ef8:	d8c00f17 	ldw	r3,60(sp)
   10efc:	18c00044 	addi	r3,r3,1
   10f00:	d8c00f15 	stw	r3,60(sp)
   10f04:	003edc06 	br	10a78 <__alt_data_end+0xffff6a78>
   10f08:	8005883a 	mov	r2,r16
   10f0c:	dfc01a17 	ldw	ra,104(sp)
   10f10:	df001917 	ldw	fp,100(sp)
   10f14:	ddc01817 	ldw	r23,96(sp)
   10f18:	dd801717 	ldw	r22,92(sp)
   10f1c:	dd401617 	ldw	r21,88(sp)
   10f20:	dd001517 	ldw	r20,84(sp)
   10f24:	dcc01417 	ldw	r19,80(sp)
   10f28:	dc801317 	ldw	r18,76(sp)
   10f2c:	dc401217 	ldw	r17,72(sp)
   10f30:	dc001117 	ldw	r16,68(sp)
   10f34:	dec01b04 	addi	sp,sp,108
   10f38:	f800283a 	ret

00010f3c <__vfprintf_internal_unused>:
   10f3c:	00800074 	movhi	r2,1
   10f40:	10877504 	addi	r2,r2,7636
   10f44:	300f883a 	mov	r7,r6
   10f48:	280d883a 	mov	r6,r5
   10f4c:	200b883a 	mov	r5,r4
   10f50:	11000017 	ldw	r4,0(r2)
   10f54:	0010a101 	jmpi	10a10 <___svfprintf_internal_r>

00010f58 <print_repeat>:
   10f58:	defffb04 	addi	sp,sp,-20
   10f5c:	dc800315 	stw	r18,12(sp)
   10f60:	dc400215 	stw	r17,8(sp)
   10f64:	dc000115 	stw	r16,4(sp)
   10f68:	dfc00415 	stw	ra,16(sp)
   10f6c:	2025883a 	mov	r18,r4
   10f70:	2823883a 	mov	r17,r5
   10f74:	d9800005 	stb	r6,0(sp)
   10f78:	3821883a 	mov	r16,r7
   10f7c:	04000a0e 	bge	zero,r16,10fa8 <print_repeat+0x50>
   10f80:	88800117 	ldw	r2,4(r17)
   10f84:	01c00044 	movi	r7,1
   10f88:	d80d883a 	mov	r6,sp
   10f8c:	880b883a 	mov	r5,r17
   10f90:	9009883a 	mov	r4,r18
   10f94:	103ee83a 	callr	r2
   10f98:	843fffc4 	addi	r16,r16,-1
   10f9c:	103ff726 	beq	r2,zero,10f7c <__alt_data_end+0xffff6f7c>
   10fa0:	00bfffc4 	movi	r2,-1
   10fa4:	00000106 	br	10fac <print_repeat+0x54>
   10fa8:	0005883a 	mov	r2,zero
   10fac:	dfc00417 	ldw	ra,16(sp)
   10fb0:	dc800317 	ldw	r18,12(sp)
   10fb4:	dc400217 	ldw	r17,8(sp)
   10fb8:	dc000117 	ldw	r16,4(sp)
   10fbc:	dec00504 	addi	sp,sp,20
   10fc0:	f800283a 	ret

00010fc4 <___vfprintf_internal_r>:
   10fc4:	deffe504 	addi	sp,sp,-108
   10fc8:	d8c00804 	addi	r3,sp,32
   10fcc:	ddc01815 	stw	r23,96(sp)
   10fd0:	dd801715 	stw	r22,92(sp)
   10fd4:	dd401615 	stw	r21,88(sp)
   10fd8:	dd001515 	stw	r20,84(sp)
   10fdc:	dcc01415 	stw	r19,80(sp)
   10fe0:	dc801315 	stw	r18,76(sp)
   10fe4:	dc401215 	stw	r17,72(sp)
   10fe8:	dc001115 	stw	r16,68(sp)
   10fec:	dfc01a15 	stw	ra,104(sp)
   10ff0:	df001915 	stw	fp,100(sp)
   10ff4:	2029883a 	mov	r20,r4
   10ff8:	2823883a 	mov	r17,r5
   10ffc:	382d883a 	mov	r22,r7
   11000:	d9800f15 	stw	r6,60(sp)
   11004:	0021883a 	mov	r16,zero
   11008:	d8000e15 	stw	zero,56(sp)
   1100c:	d8000a15 	stw	zero,40(sp)
   11010:	002b883a 	mov	r21,zero
   11014:	0027883a 	mov	r19,zero
   11018:	0025883a 	mov	r18,zero
   1101c:	d8000c15 	stw	zero,48(sp)
   11020:	d8000b15 	stw	zero,44(sp)
   11024:	002f883a 	mov	r23,zero
   11028:	d8c00915 	stw	r3,36(sp)
   1102c:	d8c00f17 	ldw	r3,60(sp)
   11030:	19000003 	ldbu	r4,0(r3)
   11034:	20803fcc 	andi	r2,r4,255
   11038:	1080201c 	xori	r2,r2,128
   1103c:	10bfe004 	addi	r2,r2,-128
   11040:	10011e26 	beq	r2,zero,114bc <___vfprintf_internal_r+0x4f8>
   11044:	00c00044 	movi	r3,1
   11048:	b8c01426 	beq	r23,r3,1109c <___vfprintf_internal_r+0xd8>
   1104c:	1dc00216 	blt	r3,r23,11058 <___vfprintf_internal_r+0x94>
   11050:	b8000626 	beq	r23,zero,1106c <___vfprintf_internal_r+0xa8>
   11054:	00011506 	br	114ac <___vfprintf_internal_r+0x4e8>
   11058:	01400084 	movi	r5,2
   1105c:	b9401d26 	beq	r23,r5,110d4 <___vfprintf_internal_r+0x110>
   11060:	014000c4 	movi	r5,3
   11064:	b9402b26 	beq	r23,r5,11114 <___vfprintf_internal_r+0x150>
   11068:	00011006 	br	114ac <___vfprintf_internal_r+0x4e8>
   1106c:	01400944 	movi	r5,37
   11070:	1140fc26 	beq	r2,r5,11464 <___vfprintf_internal_r+0x4a0>
   11074:	88800117 	ldw	r2,4(r17)
   11078:	d9000005 	stb	r4,0(sp)
   1107c:	01c00044 	movi	r7,1
   11080:	d80d883a 	mov	r6,sp
   11084:	880b883a 	mov	r5,r17
   11088:	a009883a 	mov	r4,r20
   1108c:	103ee83a 	callr	r2
   11090:	1000d81e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   11094:	84000044 	addi	r16,r16,1
   11098:	00010406 	br	114ac <___vfprintf_internal_r+0x4e8>
   1109c:	01400c04 	movi	r5,48
   110a0:	1140fa26 	beq	r2,r5,1148c <___vfprintf_internal_r+0x4c8>
   110a4:	01400944 	movi	r5,37
   110a8:	11400a1e 	bne	r2,r5,110d4 <___vfprintf_internal_r+0x110>
   110ac:	d8800005 	stb	r2,0(sp)
   110b0:	88800117 	ldw	r2,4(r17)
   110b4:	b80f883a 	mov	r7,r23
   110b8:	d80d883a 	mov	r6,sp
   110bc:	880b883a 	mov	r5,r17
   110c0:	a009883a 	mov	r4,r20
   110c4:	103ee83a 	callr	r2
   110c8:	1000ca1e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   110cc:	84000044 	addi	r16,r16,1
   110d0:	0000f506 	br	114a8 <___vfprintf_internal_r+0x4e4>
   110d4:	25fff404 	addi	r23,r4,-48
   110d8:	bdc03fcc 	andi	r23,r23,255
   110dc:	00c00244 	movi	r3,9
   110e0:	1dc00936 	bltu	r3,r23,11108 <___vfprintf_internal_r+0x144>
   110e4:	00bfffc4 	movi	r2,-1
   110e8:	90800426 	beq	r18,r2,110fc <___vfprintf_internal_r+0x138>
   110ec:	01400284 	movi	r5,10
   110f0:	9009883a 	mov	r4,r18
   110f4:	00118f40 	call	118f4 <__mulsi3>
   110f8:	00000106 	br	11100 <___vfprintf_internal_r+0x13c>
   110fc:	0005883a 	mov	r2,zero
   11100:	b8a5883a 	add	r18,r23,r2
   11104:	0000e206 	br	11490 <___vfprintf_internal_r+0x4cc>
   11108:	01400b84 	movi	r5,46
   1110c:	1140e426 	beq	r2,r5,114a0 <___vfprintf_internal_r+0x4dc>
   11110:	05c00084 	movi	r23,2
   11114:	213ff404 	addi	r4,r4,-48
   11118:	27003fcc 	andi	fp,r4,255
   1111c:	00c00244 	movi	r3,9
   11120:	1f000936 	bltu	r3,fp,11148 <___vfprintf_internal_r+0x184>
   11124:	00bfffc4 	movi	r2,-1
   11128:	98800426 	beq	r19,r2,1113c <___vfprintf_internal_r+0x178>
   1112c:	01400284 	movi	r5,10
   11130:	9809883a 	mov	r4,r19
   11134:	00118f40 	call	118f4 <__mulsi3>
   11138:	00000106 	br	11140 <___vfprintf_internal_r+0x17c>
   1113c:	0005883a 	mov	r2,zero
   11140:	e0a7883a 	add	r19,fp,r2
   11144:	0000d906 	br	114ac <___vfprintf_internal_r+0x4e8>
   11148:	00c01b04 	movi	r3,108
   1114c:	10c0d226 	beq	r2,r3,11498 <___vfprintf_internal_r+0x4d4>
   11150:	013fffc4 	movi	r4,-1
   11154:	99000226 	beq	r19,r4,11160 <___vfprintf_internal_r+0x19c>
   11158:	d8000b15 	stw	zero,44(sp)
   1115c:	00000106 	br	11164 <___vfprintf_internal_r+0x1a0>
   11160:	04c00044 	movi	r19,1
   11164:	01001a44 	movi	r4,105
   11168:	11001626 	beq	r2,r4,111c4 <___vfprintf_internal_r+0x200>
   1116c:	20800916 	blt	r4,r2,11194 <___vfprintf_internal_r+0x1d0>
   11170:	010018c4 	movi	r4,99
   11174:	11008826 	beq	r2,r4,11398 <___vfprintf_internal_r+0x3d4>
   11178:	01001904 	movi	r4,100
   1117c:	11001126 	beq	r2,r4,111c4 <___vfprintf_internal_r+0x200>
   11180:	01001604 	movi	r4,88
   11184:	1100c81e 	bne	r2,r4,114a8 <___vfprintf_internal_r+0x4e4>
   11188:	00c00044 	movi	r3,1
   1118c:	d8c00e15 	stw	r3,56(sp)
   11190:	00001506 	br	111e8 <___vfprintf_internal_r+0x224>
   11194:	01001cc4 	movi	r4,115
   11198:	11009826 	beq	r2,r4,113fc <___vfprintf_internal_r+0x438>
   1119c:	20800416 	blt	r4,r2,111b0 <___vfprintf_internal_r+0x1ec>
   111a0:	01001bc4 	movi	r4,111
   111a4:	1100c01e 	bne	r2,r4,114a8 <___vfprintf_internal_r+0x4e4>
   111a8:	05400204 	movi	r21,8
   111ac:	00000f06 	br	111ec <___vfprintf_internal_r+0x228>
   111b0:	01001d44 	movi	r4,117
   111b4:	11000d26 	beq	r2,r4,111ec <___vfprintf_internal_r+0x228>
   111b8:	01001e04 	movi	r4,120
   111bc:	11000a26 	beq	r2,r4,111e8 <___vfprintf_internal_r+0x224>
   111c0:	0000b906 	br	114a8 <___vfprintf_internal_r+0x4e4>
   111c4:	d8c00a17 	ldw	r3,40(sp)
   111c8:	b7000104 	addi	fp,r22,4
   111cc:	18000726 	beq	r3,zero,111ec <___vfprintf_internal_r+0x228>
   111d0:	df000d15 	stw	fp,52(sp)
   111d4:	b5c00017 	ldw	r23,0(r22)
   111d8:	b800080e 	bge	r23,zero,111fc <___vfprintf_internal_r+0x238>
   111dc:	05efc83a 	sub	r23,zero,r23
   111e0:	02400044 	movi	r9,1
   111e4:	00000606 	br	11200 <___vfprintf_internal_r+0x23c>
   111e8:	05400404 	movi	r21,16
   111ec:	b0c00104 	addi	r3,r22,4
   111f0:	d8c00d15 	stw	r3,52(sp)
   111f4:	b5c00017 	ldw	r23,0(r22)
   111f8:	d8000a15 	stw	zero,40(sp)
   111fc:	0013883a 	mov	r9,zero
   11200:	d839883a 	mov	fp,sp
   11204:	b8001726 	beq	r23,zero,11264 <___vfprintf_internal_r+0x2a0>
   11208:	a80b883a 	mov	r5,r21
   1120c:	b809883a 	mov	r4,r23
   11210:	da401015 	stw	r9,64(sp)
   11214:	00118380 	call	11838 <__udivsi3>
   11218:	a80b883a 	mov	r5,r21
   1121c:	1009883a 	mov	r4,r2
   11220:	102d883a 	mov	r22,r2
   11224:	00118f40 	call	118f4 <__mulsi3>
   11228:	b885c83a 	sub	r2,r23,r2
   1122c:	00c00244 	movi	r3,9
   11230:	da401017 	ldw	r9,64(sp)
   11234:	18800216 	blt	r3,r2,11240 <___vfprintf_internal_r+0x27c>
   11238:	10800c04 	addi	r2,r2,48
   1123c:	00000506 	br	11254 <___vfprintf_internal_r+0x290>
   11240:	d8c00e17 	ldw	r3,56(sp)
   11244:	18000226 	beq	r3,zero,11250 <___vfprintf_internal_r+0x28c>
   11248:	10800dc4 	addi	r2,r2,55
   1124c:	00000106 	br	11254 <___vfprintf_internal_r+0x290>
   11250:	108015c4 	addi	r2,r2,87
   11254:	e0800005 	stb	r2,0(fp)
   11258:	b02f883a 	mov	r23,r22
   1125c:	e7000044 	addi	fp,fp,1
   11260:	003fe806 	br	11204 <__alt_data_end+0xffff7204>
   11264:	e6efc83a 	sub	r23,fp,sp
   11268:	9dc5c83a 	sub	r2,r19,r23
   1126c:	0080090e 	bge	zero,r2,11294 <___vfprintf_internal_r+0x2d0>
   11270:	e085883a 	add	r2,fp,r2
   11274:	01400c04 	movi	r5,48
   11278:	d8c00917 	ldw	r3,36(sp)
   1127c:	e009883a 	mov	r4,fp
   11280:	e0c0032e 	bgeu	fp,r3,11290 <___vfprintf_internal_r+0x2cc>
   11284:	e7000044 	addi	fp,fp,1
   11288:	21400005 	stb	r5,0(r4)
   1128c:	e0bffa1e 	bne	fp,r2,11278 <__alt_data_end+0xffff7278>
   11290:	e6efc83a 	sub	r23,fp,sp
   11294:	d8c00b17 	ldw	r3,44(sp)
   11298:	4dd1883a 	add	r8,r9,r23
   1129c:	922dc83a 	sub	r22,r18,r8
   112a0:	18001626 	beq	r3,zero,112fc <___vfprintf_internal_r+0x338>
   112a4:	48000a26 	beq	r9,zero,112d0 <___vfprintf_internal_r+0x30c>
   112a8:	00800b44 	movi	r2,45
   112ac:	d8800805 	stb	r2,32(sp)
   112b0:	88800117 	ldw	r2,4(r17)
   112b4:	01c00044 	movi	r7,1
   112b8:	d9800804 	addi	r6,sp,32
   112bc:	880b883a 	mov	r5,r17
   112c0:	a009883a 	mov	r4,r20
   112c4:	103ee83a 	callr	r2
   112c8:	10004a1e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   112cc:	84000044 	addi	r16,r16,1
   112d0:	0580070e 	bge	zero,r22,112f0 <___vfprintf_internal_r+0x32c>
   112d4:	b00f883a 	mov	r7,r22
   112d8:	01800c04 	movi	r6,48
   112dc:	880b883a 	mov	r5,r17
   112e0:	a009883a 	mov	r4,r20
   112e4:	0010f580 	call	10f58 <print_repeat>
   112e8:	1000421e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   112ec:	85a1883a 	add	r16,r16,r22
   112f0:	e02d883a 	mov	r22,fp
   112f4:	bf2fc83a 	sub	r23,r23,fp
   112f8:	00002006 	br	1137c <___vfprintf_internal_r+0x3b8>
   112fc:	0580090e 	bge	zero,r22,11324 <___vfprintf_internal_r+0x360>
   11300:	b00f883a 	mov	r7,r22
   11304:	01800804 	movi	r6,32
   11308:	880b883a 	mov	r5,r17
   1130c:	a009883a 	mov	r4,r20
   11310:	da401015 	stw	r9,64(sp)
   11314:	0010f580 	call	10f58 <print_repeat>
   11318:	da401017 	ldw	r9,64(sp)
   1131c:	1000351e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   11320:	85a1883a 	add	r16,r16,r22
   11324:	483ff226 	beq	r9,zero,112f0 <__alt_data_end+0xffff72f0>
   11328:	00800b44 	movi	r2,45
   1132c:	d8800805 	stb	r2,32(sp)
   11330:	88800117 	ldw	r2,4(r17)
   11334:	01c00044 	movi	r7,1
   11338:	d9800804 	addi	r6,sp,32
   1133c:	880b883a 	mov	r5,r17
   11340:	a009883a 	mov	r4,r20
   11344:	103ee83a 	callr	r2
   11348:	10002a1e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   1134c:	84000044 	addi	r16,r16,1
   11350:	003fe706 	br	112f0 <__alt_data_end+0xffff72f0>
   11354:	b5bfffc4 	addi	r22,r22,-1
   11358:	b0800003 	ldbu	r2,0(r22)
   1135c:	01c00044 	movi	r7,1
   11360:	d9800804 	addi	r6,sp,32
   11364:	d8800805 	stb	r2,32(sp)
   11368:	88800117 	ldw	r2,4(r17)
   1136c:	880b883a 	mov	r5,r17
   11370:	a009883a 	mov	r4,r20
   11374:	103ee83a 	callr	r2
   11378:	10001e1e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   1137c:	8585c83a 	sub	r2,r16,r22
   11380:	b5c9883a 	add	r4,r22,r23
   11384:	e085883a 	add	r2,fp,r2
   11388:	013ff216 	blt	zero,r4,11354 <__alt_data_end+0xffff7354>
   1138c:	1021883a 	mov	r16,r2
   11390:	dd800d17 	ldw	r22,52(sp)
   11394:	00004406 	br	114a8 <___vfprintf_internal_r+0x4e4>
   11398:	00800044 	movi	r2,1
   1139c:	1480080e 	bge	r2,r18,113c0 <___vfprintf_internal_r+0x3fc>
   113a0:	95ffffc4 	addi	r23,r18,-1
   113a4:	b80f883a 	mov	r7,r23
   113a8:	01800804 	movi	r6,32
   113ac:	880b883a 	mov	r5,r17
   113b0:	a009883a 	mov	r4,r20
   113b4:	0010f580 	call	10f58 <print_repeat>
   113b8:	10000e1e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   113bc:	85e1883a 	add	r16,r16,r23
   113c0:	b0800017 	ldw	r2,0(r22)
   113c4:	01c00044 	movi	r7,1
   113c8:	d80d883a 	mov	r6,sp
   113cc:	d8800005 	stb	r2,0(sp)
   113d0:	88800117 	ldw	r2,4(r17)
   113d4:	880b883a 	mov	r5,r17
   113d8:	a009883a 	mov	r4,r20
   113dc:	b5c00104 	addi	r23,r22,4
   113e0:	103ee83a 	callr	r2
   113e4:	1000031e 	bne	r2,zero,113f4 <___vfprintf_internal_r+0x430>
   113e8:	84000044 	addi	r16,r16,1
   113ec:	b82d883a 	mov	r22,r23
   113f0:	00002d06 	br	114a8 <___vfprintf_internal_r+0x4e4>
   113f4:	00bfffc4 	movi	r2,-1
   113f8:	00003106 	br	114c0 <___vfprintf_internal_r+0x4fc>
   113fc:	b5c00017 	ldw	r23,0(r22)
   11400:	b7000104 	addi	fp,r22,4
   11404:	b809883a 	mov	r4,r23
   11408:	00116cc0 	call	116cc <strlen>
   1140c:	9091c83a 	sub	r8,r18,r2
   11410:	102d883a 	mov	r22,r2
   11414:	0200090e 	bge	zero,r8,1143c <___vfprintf_internal_r+0x478>
   11418:	400f883a 	mov	r7,r8
   1141c:	01800804 	movi	r6,32
   11420:	880b883a 	mov	r5,r17
   11424:	a009883a 	mov	r4,r20
   11428:	da001015 	stw	r8,64(sp)
   1142c:	0010f580 	call	10f58 <print_repeat>
   11430:	da001017 	ldw	r8,64(sp)
   11434:	103fef1e 	bne	r2,zero,113f4 <__alt_data_end+0xffff73f4>
   11438:	8221883a 	add	r16,r16,r8
   1143c:	88800117 	ldw	r2,4(r17)
   11440:	b00f883a 	mov	r7,r22
   11444:	b80d883a 	mov	r6,r23
   11448:	880b883a 	mov	r5,r17
   1144c:	a009883a 	mov	r4,r20
   11450:	103ee83a 	callr	r2
   11454:	103fe71e 	bne	r2,zero,113f4 <__alt_data_end+0xffff73f4>
   11458:	85a1883a 	add	r16,r16,r22
   1145c:	e02d883a 	mov	r22,fp
   11460:	00001106 	br	114a8 <___vfprintf_internal_r+0x4e4>
   11464:	00c00044 	movi	r3,1
   11468:	04ffffc4 	movi	r19,-1
   1146c:	d8000e15 	stw	zero,56(sp)
   11470:	d8c00a15 	stw	r3,40(sp)
   11474:	05400284 	movi	r21,10
   11478:	9825883a 	mov	r18,r19
   1147c:	d8000c15 	stw	zero,48(sp)
   11480:	d8000b15 	stw	zero,44(sp)
   11484:	182f883a 	mov	r23,r3
   11488:	00000806 	br	114ac <___vfprintf_internal_r+0x4e8>
   1148c:	ddc00b15 	stw	r23,44(sp)
   11490:	05c00084 	movi	r23,2
   11494:	00000506 	br	114ac <___vfprintf_internal_r+0x4e8>
   11498:	00c00044 	movi	r3,1
   1149c:	d8c00c15 	stw	r3,48(sp)
   114a0:	05c000c4 	movi	r23,3
   114a4:	00000106 	br	114ac <___vfprintf_internal_r+0x4e8>
   114a8:	002f883a 	mov	r23,zero
   114ac:	d8c00f17 	ldw	r3,60(sp)
   114b0:	18c00044 	addi	r3,r3,1
   114b4:	d8c00f15 	stw	r3,60(sp)
   114b8:	003edc06 	br	1102c <__alt_data_end+0xffff702c>
   114bc:	8005883a 	mov	r2,r16
   114c0:	dfc01a17 	ldw	ra,104(sp)
   114c4:	df001917 	ldw	fp,100(sp)
   114c8:	ddc01817 	ldw	r23,96(sp)
   114cc:	dd801717 	ldw	r22,92(sp)
   114d0:	dd401617 	ldw	r21,88(sp)
   114d4:	dd001517 	ldw	r20,84(sp)
   114d8:	dcc01417 	ldw	r19,80(sp)
   114dc:	dc801317 	ldw	r18,76(sp)
   114e0:	dc401217 	ldw	r17,72(sp)
   114e4:	dc001117 	ldw	r16,68(sp)
   114e8:	dec01b04 	addi	sp,sp,108
   114ec:	f800283a 	ret

000114f0 <__vfprintf_internal>:
   114f0:	00800074 	movhi	r2,1
   114f4:	10877504 	addi	r2,r2,7636
   114f8:	300f883a 	mov	r7,r6
   114fc:	280d883a 	mov	r6,r5
   11500:	200b883a 	mov	r5,r4
   11504:	11000017 	ldw	r4,0(r2)
   11508:	0010fc41 	jmpi	10fc4 <___vfprintf_internal_r>

0001150c <__sfvwrite_small_dev>:
   1150c:	2880000b 	ldhu	r2,0(r5)
   11510:	1080020c 	andi	r2,r2,8
   11514:	10002126 	beq	r2,zero,1159c <__sfvwrite_small_dev+0x90>
   11518:	2880008f 	ldh	r2,2(r5)
   1151c:	defffa04 	addi	sp,sp,-24
   11520:	dc000015 	stw	r16,0(sp)
   11524:	dfc00515 	stw	ra,20(sp)
   11528:	dd000415 	stw	r20,16(sp)
   1152c:	dcc00315 	stw	r19,12(sp)
   11530:	dc800215 	stw	r18,8(sp)
   11534:	dc400115 	stw	r17,4(sp)
   11538:	2821883a 	mov	r16,r5
   1153c:	10001216 	blt	r2,zero,11588 <__sfvwrite_small_dev+0x7c>
   11540:	2027883a 	mov	r19,r4
   11544:	3025883a 	mov	r18,r6
   11548:	3823883a 	mov	r17,r7
   1154c:	05010004 	movi	r20,1024
   11550:	04400b0e 	bge	zero,r17,11580 <__sfvwrite_small_dev+0x74>
   11554:	880f883a 	mov	r7,r17
   11558:	a440010e 	bge	r20,r17,11560 <__sfvwrite_small_dev+0x54>
   1155c:	01c10004 	movi	r7,1024
   11560:	8140008f 	ldh	r5,2(r16)
   11564:	900d883a 	mov	r6,r18
   11568:	9809883a 	mov	r4,r19
   1156c:	00116e80 	call	116e8 <_write_r>
   11570:	0080050e 	bge	zero,r2,11588 <__sfvwrite_small_dev+0x7c>
   11574:	88a3c83a 	sub	r17,r17,r2
   11578:	90a5883a 	add	r18,r18,r2
   1157c:	003ff406 	br	11550 <__alt_data_end+0xffff7550>
   11580:	0005883a 	mov	r2,zero
   11584:	00000706 	br	115a4 <__sfvwrite_small_dev+0x98>
   11588:	8080000b 	ldhu	r2,0(r16)
   1158c:	10801014 	ori	r2,r2,64
   11590:	8080000d 	sth	r2,0(r16)
   11594:	00bfffc4 	movi	r2,-1
   11598:	00000206 	br	115a4 <__sfvwrite_small_dev+0x98>
   1159c:	00bfffc4 	movi	r2,-1
   115a0:	f800283a 	ret
   115a4:	dfc00517 	ldw	ra,20(sp)
   115a8:	dd000417 	ldw	r20,16(sp)
   115ac:	dcc00317 	ldw	r19,12(sp)
   115b0:	dc800217 	ldw	r18,8(sp)
   115b4:	dc400117 	ldw	r17,4(sp)
   115b8:	dc000017 	ldw	r16,0(sp)
   115bc:	dec00604 	addi	sp,sp,24
   115c0:	f800283a 	ret

000115c4 <__sfvwrite_small_str>:
   115c4:	2880000b 	ldhu	r2,0(r5)
   115c8:	10c0020c 	andi	r3,r2,8
   115cc:	18002026 	beq	r3,zero,11650 <__sfvwrite_small_str+0x8c>
   115d0:	28c0008f 	ldh	r3,2(r5)
   115d4:	defffd04 	addi	sp,sp,-12
   115d8:	dc000015 	stw	r16,0(sp)
   115dc:	dfc00215 	stw	ra,8(sp)
   115e0:	dc400115 	stw	r17,4(sp)
   115e4:	2821883a 	mov	r16,r5
   115e8:	1800150e 	bge	r3,zero,11640 <__sfvwrite_small_str+0x7c>
   115ec:	10c0800c 	andi	r3,r2,512
   115f0:	18001326 	beq	r3,zero,11640 <__sfvwrite_small_str+0x7c>
   115f4:	2c400517 	ldw	r17,20(r5)
   115f8:	89c0030e 	bge	r17,r7,11608 <__sfvwrite_small_str+0x44>
   115fc:	10c0200c 	andi	r3,r2,128
   11600:	18000326 	beq	r3,zero,11610 <__sfvwrite_small_str+0x4c>
   11604:	00000e06 	br	11640 <__sfvwrite_small_str+0x7c>
   11608:	3c40010e 	bge	r7,r17,11610 <__sfvwrite_small_str+0x4c>
   1160c:	3823883a 	mov	r17,r7
   11610:	81000417 	ldw	r4,16(r16)
   11614:	300b883a 	mov	r5,r6
   11618:	880d883a 	mov	r6,r17
   1161c:	001166c0 	call	1166c <memmove>
   11620:	80800517 	ldw	r2,20(r16)
   11624:	1445c83a 	sub	r2,r2,r17
   11628:	80800515 	stw	r2,20(r16)
   1162c:	80800417 	ldw	r2,16(r16)
   11630:	1463883a 	add	r17,r2,r17
   11634:	84400415 	stw	r17,16(r16)
   11638:	0005883a 	mov	r2,zero
   1163c:	00000606 	br	11658 <__sfvwrite_small_str+0x94>
   11640:	10801014 	ori	r2,r2,64
   11644:	8080000d 	sth	r2,0(r16)
   11648:	00bfffc4 	movi	r2,-1
   1164c:	00000206 	br	11658 <__sfvwrite_small_str+0x94>
   11650:	00bfffc4 	movi	r2,-1
   11654:	f800283a 	ret
   11658:	dfc00217 	ldw	ra,8(sp)
   1165c:	dc400117 	ldw	r17,4(sp)
   11660:	dc000017 	ldw	r16,0(sp)
   11664:	dec00304 	addi	sp,sp,12
   11668:	f800283a 	ret

0001166c <memmove>:
   1166c:	2005883a 	mov	r2,r4
   11670:	218f883a 	add	r7,r4,r6
   11674:	29000236 	bltu	r5,r4,11680 <memmove+0x14>
   11678:	1007883a 	mov	r3,r2
   1167c:	00000c06 	br	116b0 <memmove+0x44>
   11680:	2987883a 	add	r3,r5,r6
   11684:	20fffc2e 	bgeu	r4,r3,11678 <__alt_data_end+0xffff7678>
   11688:	380b883a 	mov	r5,r7
   1168c:	30cdc83a 	sub	r6,r6,r3
   11690:	1989883a 	add	r4,r3,r6
   11694:	20000526 	beq	r4,zero,116ac <memmove+0x40>
   11698:	18ffffc4 	addi	r3,r3,-1
   1169c:	19000003 	ldbu	r4,0(r3)
   116a0:	297fffc4 	addi	r5,r5,-1
   116a4:	29000005 	stb	r4,0(r5)
   116a8:	003ff906 	br	11690 <__alt_data_end+0xffff7690>
   116ac:	f800283a 	ret
   116b0:	19c00526 	beq	r3,r7,116c8 <memmove+0x5c>
   116b4:	29000003 	ldbu	r4,0(r5)
   116b8:	18c00044 	addi	r3,r3,1
   116bc:	29400044 	addi	r5,r5,1
   116c0:	193fffc5 	stb	r4,-1(r3)
   116c4:	003ffa06 	br	116b0 <__alt_data_end+0xffff76b0>
   116c8:	f800283a 	ret

000116cc <strlen>:
   116cc:	2005883a 	mov	r2,r4
   116d0:	10c00007 	ldb	r3,0(r2)
   116d4:	18000226 	beq	r3,zero,116e0 <strlen+0x14>
   116d8:	10800044 	addi	r2,r2,1
   116dc:	003ffc06 	br	116d0 <__alt_data_end+0xffff76d0>
   116e0:	1105c83a 	sub	r2,r2,r4
   116e4:	f800283a 	ret

000116e8 <_write_r>:
   116e8:	defffd04 	addi	sp,sp,-12
   116ec:	dc000015 	stw	r16,0(sp)
   116f0:	04000074 	movhi	r16,1
   116f4:	dc400115 	stw	r17,4(sp)
   116f8:	8407ca04 	addi	r16,r16,7976
   116fc:	2023883a 	mov	r17,r4
   11700:	2809883a 	mov	r4,r5
   11704:	300b883a 	mov	r5,r6
   11708:	380d883a 	mov	r6,r7
   1170c:	dfc00215 	stw	ra,8(sp)
   11710:	80000015 	stw	zero,0(r16)
   11714:	0011b1c0 	call	11b1c <write>
   11718:	00ffffc4 	movi	r3,-1
   1171c:	10c0031e 	bne	r2,r3,1172c <_write_r+0x44>
   11720:	80c00017 	ldw	r3,0(r16)
   11724:	18000126 	beq	r3,zero,1172c <_write_r+0x44>
   11728:	88c00015 	stw	r3,0(r17)
   1172c:	dfc00217 	ldw	ra,8(sp)
   11730:	dc400117 	ldw	r17,4(sp)
   11734:	dc000017 	ldw	r16,0(sp)
   11738:	dec00304 	addi	sp,sp,12
   1173c:	f800283a 	ret

00011740 <__divsi3>:
   11740:	20001b16 	blt	r4,zero,117b0 <__divsi3+0x70>
   11744:	000f883a 	mov	r7,zero
   11748:	28001616 	blt	r5,zero,117a4 <__divsi3+0x64>
   1174c:	200d883a 	mov	r6,r4
   11750:	29001a2e 	bgeu	r5,r4,117bc <__divsi3+0x7c>
   11754:	00800804 	movi	r2,32
   11758:	00c00044 	movi	r3,1
   1175c:	00000106 	br	11764 <__divsi3+0x24>
   11760:	10000d26 	beq	r2,zero,11798 <__divsi3+0x58>
   11764:	294b883a 	add	r5,r5,r5
   11768:	10bfffc4 	addi	r2,r2,-1
   1176c:	18c7883a 	add	r3,r3,r3
   11770:	293ffb36 	bltu	r5,r4,11760 <__alt_data_end+0xffff7760>
   11774:	0005883a 	mov	r2,zero
   11778:	18000726 	beq	r3,zero,11798 <__divsi3+0x58>
   1177c:	0005883a 	mov	r2,zero
   11780:	31400236 	bltu	r6,r5,1178c <__divsi3+0x4c>
   11784:	314dc83a 	sub	r6,r6,r5
   11788:	10c4b03a 	or	r2,r2,r3
   1178c:	1806d07a 	srli	r3,r3,1
   11790:	280ad07a 	srli	r5,r5,1
   11794:	183ffa1e 	bne	r3,zero,11780 <__alt_data_end+0xffff7780>
   11798:	38000126 	beq	r7,zero,117a0 <__divsi3+0x60>
   1179c:	0085c83a 	sub	r2,zero,r2
   117a0:	f800283a 	ret
   117a4:	014bc83a 	sub	r5,zero,r5
   117a8:	39c0005c 	xori	r7,r7,1
   117ac:	003fe706 	br	1174c <__alt_data_end+0xffff774c>
   117b0:	0109c83a 	sub	r4,zero,r4
   117b4:	01c00044 	movi	r7,1
   117b8:	003fe306 	br	11748 <__alt_data_end+0xffff7748>
   117bc:	00c00044 	movi	r3,1
   117c0:	003fee06 	br	1177c <__alt_data_end+0xffff777c>

000117c4 <__modsi3>:
   117c4:	20001716 	blt	r4,zero,11824 <__modsi3+0x60>
   117c8:	000f883a 	mov	r7,zero
   117cc:	2005883a 	mov	r2,r4
   117d0:	28001216 	blt	r5,zero,1181c <__modsi3+0x58>
   117d4:	2900162e 	bgeu	r5,r4,11830 <__modsi3+0x6c>
   117d8:	01800804 	movi	r6,32
   117dc:	00c00044 	movi	r3,1
   117e0:	00000106 	br	117e8 <__modsi3+0x24>
   117e4:	30000a26 	beq	r6,zero,11810 <__modsi3+0x4c>
   117e8:	294b883a 	add	r5,r5,r5
   117ec:	31bfffc4 	addi	r6,r6,-1
   117f0:	18c7883a 	add	r3,r3,r3
   117f4:	293ffb36 	bltu	r5,r4,117e4 <__alt_data_end+0xffff77e4>
   117f8:	18000526 	beq	r3,zero,11810 <__modsi3+0x4c>
   117fc:	1806d07a 	srli	r3,r3,1
   11800:	11400136 	bltu	r2,r5,11808 <__modsi3+0x44>
   11804:	1145c83a 	sub	r2,r2,r5
   11808:	280ad07a 	srli	r5,r5,1
   1180c:	183ffb1e 	bne	r3,zero,117fc <__alt_data_end+0xffff77fc>
   11810:	38000126 	beq	r7,zero,11818 <__modsi3+0x54>
   11814:	0085c83a 	sub	r2,zero,r2
   11818:	f800283a 	ret
   1181c:	014bc83a 	sub	r5,zero,r5
   11820:	003fec06 	br	117d4 <__alt_data_end+0xffff77d4>
   11824:	0109c83a 	sub	r4,zero,r4
   11828:	01c00044 	movi	r7,1
   1182c:	003fe706 	br	117cc <__alt_data_end+0xffff77cc>
   11830:	00c00044 	movi	r3,1
   11834:	003ff106 	br	117fc <__alt_data_end+0xffff77fc>

00011838 <__udivsi3>:
   11838:	200d883a 	mov	r6,r4
   1183c:	2900152e 	bgeu	r5,r4,11894 <__udivsi3+0x5c>
   11840:	28001416 	blt	r5,zero,11894 <__udivsi3+0x5c>
   11844:	00800804 	movi	r2,32
   11848:	00c00044 	movi	r3,1
   1184c:	00000206 	br	11858 <__udivsi3+0x20>
   11850:	10000e26 	beq	r2,zero,1188c <__udivsi3+0x54>
   11854:	28000516 	blt	r5,zero,1186c <__udivsi3+0x34>
   11858:	294b883a 	add	r5,r5,r5
   1185c:	10bfffc4 	addi	r2,r2,-1
   11860:	18c7883a 	add	r3,r3,r3
   11864:	293ffa36 	bltu	r5,r4,11850 <__alt_data_end+0xffff7850>
   11868:	18000826 	beq	r3,zero,1188c <__udivsi3+0x54>
   1186c:	0005883a 	mov	r2,zero
   11870:	31400236 	bltu	r6,r5,1187c <__udivsi3+0x44>
   11874:	314dc83a 	sub	r6,r6,r5
   11878:	10c4b03a 	or	r2,r2,r3
   1187c:	1806d07a 	srli	r3,r3,1
   11880:	280ad07a 	srli	r5,r5,1
   11884:	183ffa1e 	bne	r3,zero,11870 <__alt_data_end+0xffff7870>
   11888:	f800283a 	ret
   1188c:	0005883a 	mov	r2,zero
   11890:	f800283a 	ret
   11894:	00c00044 	movi	r3,1
   11898:	003ff406 	br	1186c <__alt_data_end+0xffff786c>

0001189c <__umodsi3>:
   1189c:	2005883a 	mov	r2,r4
   118a0:	2900122e 	bgeu	r5,r4,118ec <__umodsi3+0x50>
   118a4:	28001116 	blt	r5,zero,118ec <__umodsi3+0x50>
   118a8:	01800804 	movi	r6,32
   118ac:	00c00044 	movi	r3,1
   118b0:	00000206 	br	118bc <__umodsi3+0x20>
   118b4:	30000c26 	beq	r6,zero,118e8 <__umodsi3+0x4c>
   118b8:	28000516 	blt	r5,zero,118d0 <__umodsi3+0x34>
   118bc:	294b883a 	add	r5,r5,r5
   118c0:	31bfffc4 	addi	r6,r6,-1
   118c4:	18c7883a 	add	r3,r3,r3
   118c8:	293ffa36 	bltu	r5,r4,118b4 <__alt_data_end+0xffff78b4>
   118cc:	18000626 	beq	r3,zero,118e8 <__umodsi3+0x4c>
   118d0:	1806d07a 	srli	r3,r3,1
   118d4:	11400136 	bltu	r2,r5,118dc <__umodsi3+0x40>
   118d8:	1145c83a 	sub	r2,r2,r5
   118dc:	280ad07a 	srli	r5,r5,1
   118e0:	183ffb1e 	bne	r3,zero,118d0 <__alt_data_end+0xffff78d0>
   118e4:	f800283a 	ret
   118e8:	f800283a 	ret
   118ec:	00c00044 	movi	r3,1
   118f0:	003ff706 	br	118d0 <__alt_data_end+0xffff78d0>

000118f4 <__mulsi3>:
   118f4:	0005883a 	mov	r2,zero
   118f8:	20000726 	beq	r4,zero,11918 <__mulsi3+0x24>
   118fc:	20c0004c 	andi	r3,r4,1
   11900:	2008d07a 	srli	r4,r4,1
   11904:	18000126 	beq	r3,zero,1190c <__mulsi3+0x18>
   11908:	1145883a 	add	r2,r2,r5
   1190c:	294b883a 	add	r5,r5,r5
   11910:	203ffa1e 	bne	r4,zero,118fc <__alt_data_end+0xffff78fc>
   11914:	f800283a 	ret
   11918:	f800283a 	ret

0001191c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1191c:	00119a81 	jmpi	119a8 <alt_iic_isr_register>

00011920 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11920:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11924:	00bfff84 	movi	r2,-2
   11928:	2084703a 	and	r2,r4,r2
   1192c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11930:	00c00044 	movi	r3,1
   11934:	d0a06117 	ldw	r2,-32380(gp)
   11938:	194a983a 	sll	r5,r3,r5
   1193c:	288ab03a 	or	r5,r5,r2
   11940:	d1606115 	stw	r5,-32380(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11944:	d0a06117 	ldw	r2,-32380(gp)
   11948:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1194c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   11950:	0005883a 	mov	r2,zero
   11954:	f800283a 	ret

00011958 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11958:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1195c:	00bfff84 	movi	r2,-2
   11960:	2084703a 	and	r2,r4,r2
   11964:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   11968:	00ffff84 	movi	r3,-2
   1196c:	d0a06117 	ldw	r2,-32380(gp)
   11970:	194a183a 	rol	r5,r3,r5
   11974:	288a703a 	and	r5,r5,r2
   11978:	d1606115 	stw	r5,-32380(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1197c:	d0a06117 	ldw	r2,-32380(gp)
   11980:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11984:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   11988:	0005883a 	mov	r2,zero
   1198c:	f800283a 	ret

00011990 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11990:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   11994:	00800044 	movi	r2,1
   11998:	1144983a 	sll	r2,r2,r5
   1199c:	10c4703a 	and	r2,r2,r3
}
   119a0:	1004c03a 	cmpne	r2,r2,zero
   119a4:	f800283a 	ret

000119a8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   119a8:	00c007c4 	movi	r3,31
   119ac:	19401616 	blt	r3,r5,11a08 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   119b0:	defffe04 	addi	sp,sp,-8
   119b4:	dfc00115 	stw	ra,4(sp)
   119b8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119bc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119c0:	00ffff84 	movi	r3,-2
   119c4:	80c6703a 	and	r3,r16,r3
   119c8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   119cc:	280490fa 	slli	r2,r5,3
   119d0:	00c00074 	movhi	r3,1
   119d4:	18c7d004 	addi	r3,r3,8000
   119d8:	1885883a 	add	r2,r3,r2
   119dc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   119e0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   119e4:	30000226 	beq	r6,zero,119f0 <alt_iic_isr_register+0x48>
   119e8:	00119200 	call	11920 <alt_ic_irq_enable>
   119ec:	00000106 	br	119f4 <alt_iic_isr_register+0x4c>
   119f0:	00119580 	call	11958 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   119f4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   119f8:	dfc00117 	ldw	ra,4(sp)
   119fc:	dc000017 	ldw	r16,0(sp)
   11a00:	dec00204 	addi	sp,sp,8
   11a04:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   11a08:	00bffa84 	movi	r2,-22
   11a0c:	f800283a 	ret

00011a10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11a10:	deffff04 	addi	sp,sp,-4
   11a14:	01000074 	movhi	r4,1
   11a18:	01400074 	movhi	r5,1
   11a1c:	dfc00015 	stw	ra,0(sp)
   11a20:	21073204 	addi	r4,r4,7368
   11a24:	29477904 	addi	r5,r5,7652

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11a28:	2140061e 	bne	r4,r5,11a44 <alt_load+0x34>
   11a2c:	01000074 	movhi	r4,1
   11a30:	01400074 	movhi	r5,1
   11a34:	21000804 	addi	r4,r4,32
   11a38:	29400804 	addi	r5,r5,32
   11a3c:	2140121e 	bne	r4,r5,11a88 <alt_load+0x78>
   11a40:	00000b06 	br	11a70 <alt_load+0x60>
   11a44:	00c00074 	movhi	r3,1
   11a48:	18c77904 	addi	r3,r3,7652
   11a4c:	1907c83a 	sub	r3,r3,r4
   11a50:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11a54:	10fff526 	beq	r2,r3,11a2c <__alt_data_end+0xffff7a2c>
    {
      *to++ = *from++;
   11a58:	114f883a 	add	r7,r2,r5
   11a5c:	39c00017 	ldw	r7,0(r7)
   11a60:	110d883a 	add	r6,r2,r4
   11a64:	10800104 	addi	r2,r2,4
   11a68:	31c00015 	stw	r7,0(r6)
   11a6c:	003ff906 	br	11a54 <__alt_data_end+0xffff7a54>
   11a70:	01000074 	movhi	r4,1
   11a74:	01400074 	movhi	r5,1
   11a78:	21071604 	addi	r4,r4,7256
   11a7c:	29471604 	addi	r5,r5,7256

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11a80:	2140101e 	bne	r4,r5,11ac4 <alt_load+0xb4>
   11a84:	00000b06 	br	11ab4 <alt_load+0xa4>
   11a88:	00c00074 	movhi	r3,1
   11a8c:	18c06004 	addi	r3,r3,384
   11a90:	1907c83a 	sub	r3,r3,r4
   11a94:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11a98:	10fff526 	beq	r2,r3,11a70 <__alt_data_end+0xffff7a70>
    {
      *to++ = *from++;
   11a9c:	114f883a 	add	r7,r2,r5
   11aa0:	39c00017 	ldw	r7,0(r7)
   11aa4:	110d883a 	add	r6,r2,r4
   11aa8:	10800104 	addi	r2,r2,4
   11aac:	31c00015 	stw	r7,0(r6)
   11ab0:	003ff906 	br	11a98 <__alt_data_end+0xffff7a98>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11ab4:	0011bd40 	call	11bd4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11ab8:	dfc00017 	ldw	ra,0(sp)
   11abc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11ac0:	0011bd81 	jmpi	11bd8 <alt_icache_flush_all>
   11ac4:	00c00074 	movhi	r3,1
   11ac8:	18c73204 	addi	r3,r3,7368
   11acc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11ad0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11ad4:	18bff726 	beq	r3,r2,11ab4 <__alt_data_end+0xffff7ab4>
    {
      *to++ = *from++;
   11ad8:	114f883a 	add	r7,r2,r5
   11adc:	39c00017 	ldw	r7,0(r7)
   11ae0:	110d883a 	add	r6,r2,r4
   11ae4:	10800104 	addi	r2,r2,4
   11ae8:	31c00015 	stw	r7,0(r6)
   11aec:	003ff906 	br	11ad4 <__alt_data_end+0xffff7ad4>

00011af0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11af0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11af4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11af8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11afc:	0011b7c0 	call	11b7c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11b00:	0011b9c0 	call	11b9c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11b04:	d1a06217 	ldw	r6,-32376(gp)
   11b08:	d1606317 	ldw	r5,-32372(gp)
   11b0c:	d1206417 	ldw	r4,-32368(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11b10:	dfc00017 	ldw	ra,0(sp)
   11b14:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11b18:	00107901 	jmpi	10790 <main>

00011b1c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   11b1c:	00800044 	movi	r2,1
   11b20:	20800226 	beq	r4,r2,11b2c <write+0x10>
   11b24:	00800084 	movi	r2,2
   11b28:	2080041e 	bne	r4,r2,11b3c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   11b2c:	01000074 	movhi	r4,1
   11b30:	000f883a 	mov	r7,zero
   11b34:	21077704 	addi	r4,r4,7644
   11b38:	0011ba01 	jmpi	11ba0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11b3c:	d0a00e17 	ldw	r2,-32712(gp)
   11b40:	10000926 	beq	r2,zero,11b68 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11b44:	deffff04 	addi	sp,sp,-4
   11b48:	dfc00015 	stw	ra,0(sp)
   11b4c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11b50:	00c01444 	movi	r3,81
   11b54:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11b58:	00bfffc4 	movi	r2,-1
   11b5c:	dfc00017 	ldw	ra,0(sp)
   11b60:	dec00104 	addi	sp,sp,4
   11b64:	f800283a 	ret
   11b68:	d0a06004 	addi	r2,gp,-32384
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11b6c:	00c01444 	movi	r3,81
   11b70:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11b74:	00bfffc4 	movi	r2,-1
   11b78:	f800283a 	ret

00011b7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11b7c:	deffff04 	addi	sp,sp,-4
   11b80:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII, NIOSII);
   11b84:	0011c500 	call	11c50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11b88:	00800044 	movi	r2,1
   11b8c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11b90:	dfc00017 	ldw	ra,0(sp)
   11b94:	dec00104 	addi	sp,sp,4
   11b98:	f800283a 	ret

00011b9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   11b9c:	f800283a 	ret

00011ba0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   11ba0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   11ba4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11ba8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11bac:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11bb0:	2980072e 	bgeu	r5,r6,11bd0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11bb4:	38c00037 	ldwio	r3,0(r7)
   11bb8:	18ffffec 	andhi	r3,r3,65535
   11bbc:	183ffc26 	beq	r3,zero,11bb0 <__alt_data_end+0xffff7bb0>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11bc0:	28c00007 	ldb	r3,0(r5)
   11bc4:	20c00035 	stwio	r3,0(r4)
   11bc8:	29400044 	addi	r5,r5,1
   11bcc:	003ff806 	br	11bb0 <__alt_data_end+0xffff7bb0>

  return count;
}
   11bd0:	f800283a 	ret

00011bd4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11bd4:	f800283a 	ret

00011bd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11bd8:	f800283a 	ret

00011bdc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11bdc:	213ffe84 	addi	r4,r4,-6
   11be0:	008003c4 	movi	r2,15
   11be4:	11001636 	bltu	r2,r4,11c40 <alt_exception_cause_generated_bad_addr+0x64>
   11be8:	200890ba 	slli	r4,r4,2
   11bec:	00800074 	movhi	r2,1
   11bf0:	10870004 	addi	r2,r2,7168
   11bf4:	2089883a 	add	r4,r4,r2
   11bf8:	20800017 	ldw	r2,0(r4)
   11bfc:	1000683a 	jmp	r2
   11c00:	00011c48 	cmpgei	zero,zero,1137
   11c04:	00011c48 	cmpgei	zero,zero,1137
   11c08:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c0c:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c10:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c14:	00011c48 	cmpgei	zero,zero,1137
   11c18:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c1c:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c20:	00011c48 	cmpgei	zero,zero,1137
   11c24:	00011c48 	cmpgei	zero,zero,1137
   11c28:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c2c:	00011c48 	cmpgei	zero,zero,1137
   11c30:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c34:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c38:	00011c40 	call	11c4 <__alt_mem_ONCHIPRAM-0xee3c>
   11c3c:	00011c48 	cmpgei	zero,zero,1137
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11c40:	0005883a 	mov	r2,zero
   11c44:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11c48:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11c4c:	f800283a 	ret

00011c50 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11c50:	000170fa 	wrctl	ienable,zero
   11c54:	f800283a 	ret
