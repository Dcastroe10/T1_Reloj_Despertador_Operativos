
AlarmClock1.elf:     file format elf32-littlenios2
AlarmClock1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000017b0 memsz 0x000017b0 flags r-x
    LOAD off    0x000027d0 vaddr 0x000117d0 paddr 0x000118ec align 2**12
         filesz 0x0000011c memsz 0x0000011c flags rw-
    LOAD off    0x00002a08 vaddr 0x00011a08 paddr 0x00011a08 align 2**12
         filesz 0x00000000 memsz 0x00000128 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001630  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000020  000117b0  000117b0  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000011c  000117d0  000118ec  000027d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000128  00011a08  00011a08  00002a08  2**2
                  ALLOC, SMALL_DATA
  6 .ONCHIPRAM    00000000  00011b30  00011b30  000028ec  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000430  00000000  00000000  00002910  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005cf2  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f41  00000000  00000000  00008a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000022ec  00000000  00000000  0000a973  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005f0  00000000  00000000  0000cc60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017ae  00000000  00000000  0000d250  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000024d0  00000000  00000000  0000e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00010ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003a8  00000000  00000000  00010ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001286e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  00012871  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00012877  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00012878  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00012879  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0001287d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00012881  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00012885  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  00012892  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c86  00000000  00000000  000128bf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006dd32  00000000  00000000  00017545  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000117b0 l    d  .rodata	00000000 .rodata
000117d0 l    d  .rwdata	00000000 .rwdata
00011a08 l    d  .bss	00000000 .bss
00011b30 l    d  .ONCHIPRAM	00000000 .ONCHIPRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../AlarmClock1_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000117c4 l     O .rodata	0000000a CSWTCH.19
00010278 l     F .text	00000058 timer_isr
00011a08 l     O .bss	00000004 count.2638
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000104fc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
00010ab0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
000117d0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00011a2c g     O .bss	00000004 alt_instruction_exception_handler
00011648 g     F .text	0000002c alt_main
00011a30 g     O .bss	00000100 alt_irq
000118ec g       *ABS*	00000000 __flash_rwdata_start
000103d4 g     F .text	0000004c printf
000111c4 g     F .text	00000060 memmove
000117a8 g     F .text	00000008 altera_nios2_gen2_irq_init
000101bc g     F .text	0000002c intTo7segment
0001111c g     F .text	000000a8 __sfvwrite_small_str
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011a18 g     O .bss	00000004 errno
00010000 g       *ABS*	00000000 __alt_mem_ONCHIPRAM
00011a24 g     O .bss	00000004 alt_argv
000198b0 g       *ABS*	00000000 _gp
000118d0 g     O .rwdata	00000004 segment2
000118d4 g     O .rwdata	00000004 segment1
00011734 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010398 g     F .text	0000003c _printf_r
00011390 g     F .text	00000064 .hidden __udivsi3
000118b8 g     O .rwdata	00000004 button4
000118d8 g     O .rwdata	00000004 _global_impure_ptr
00011b30 g       *ABS*	00000000 __bss_end
00011500 g     F .text	00000068 alt_iic_isr_register
000114e8 g     F .text	00000018 alt_ic_irq_enabled
00011a1c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001172c g     F .text	00000004 alt_dcache_flush_all
000118ec g       *ABS*	00000000 __ram_rwdata_end
00011674 g     F .text	00000060 write
000117d0 g       *ABS*	00000000 __ram_rodata_end
000113f4 g     F .text	00000058 .hidden __umodsi3
000118b0 g     O .rwdata	00000004 buzzer
00011b30 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
0001a000 g       *ABS*	00000000 __alt_stack_pointer
000116f8 g     F .text	00000034 altera_avalon_jtag_uart_write
00010b1c g     F .text	0000052c ___vfprintf_internal_r
00010420 g     F .text	00000064 _sprintf_r
000102d0 g     F .text	00000040 init_timer_interrupt
000101e8 g     F .text	00000090 displayHour
00010180 g     F .text	0000003c _start
000116f4 g     F .text	00000004 alt_sys_init
0001144c g     F .text	00000028 .hidden __mulsi3
000117d0 g       *ABS*	00000000 __ram_rwdata_start
000117b0 g       *ABS*	00000000 __ram_rodata_start
00011b30 g       *ABS*	00000000 __alt_stack_base
000118c0 g     O .rwdata	00000004 button2
00010568 g     F .text	0000052c ___svfprintf_internal_r
00011064 g     F .text	000000b8 __sfvwrite_small_dev
00011a08 g       *ABS*	00000000 __bss_start
00010310 g     F .text	00000088 main
00011a20 g     O .bss	00000004 alt_envp
000118e4 g     O .rwdata	00000004 JTAG
000118e8 g     O .rwdata	00000004 alt_errno
00011a0c g     O .bss	00000004 seconds
000118bc g     O .rwdata	00000004 button3
00011298 g     F .text	00000084 .hidden __divsi3
000117b0 g       *ABS*	00000000 __flash_rodata_start
000116d4 g     F .text	00000020 alt_irq_init
00010484 g     F .text	00000078 sprintf
00011240 g     F .text	00000058 _write_r
000118dc g     O .rwdata	00000004 _impure_ptr
00011a28 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00010a94 g     F .text	0000001c __vfprintf_internal_unused
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011474 g     F .text	00000004 alt_ic_isr_register
000118c4 g     O .rwdata	00000004 button1
000118ec g       *ABS*	00000000 _edata
00011b30 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
000118c8 g     O .rwdata	00000004 segment4
000118cc g     O .rwdata	00000004 segment3
000114b0 g     F .text	00000038 alt_ic_irq_disable
0001131c g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
00011a10 g     O .bss	00000004 minutes
00011224 g     F .text	0000001c strlen
00011730 g     F .text	00000004 alt_icache_flush_all
00011a14 g     O .bss	00000004 hours
000118e0 g     O .rwdata	00000004 alt_priority_mask
00011478 g     F .text	00000038 alt_ic_irq_enable
00011048 g     F .text	0000001c __vfprintf_internal
00011568 g     F .text	000000e0 alt_load
000118b4 g     O .rwdata	00000004 alarm1



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1010c:	04000074 	movhi	r16,1
   10110:	84068c04 	addi	r16,r16,6704

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	0005883a 	mov	r2,zero
    mask = 1;
   10118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	20ca703a 	and	r5,r4,r3
   10120:	28000b26 	beq	r5,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10124:	100490fa 	slli	r2,r2,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	203ff51e 	bne	r4,zero,10114 <__alt_data_end+0xffff6114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	18c7883a 	add	r3,r3,r3
      i++;
   10154:	10800044 	addi	r2,r2,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff611c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a05f17 	ldw	r2,-32388(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a62c14 	ori	gp,gp,39088
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10868214 	ori	r2,r2,6664

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c6cc14 	ori	r3,r3,6960

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff61a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00115680 	call	11568 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00116480 	call	11648 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff61b8>

000101bc <intTo7segment>:
    int seconds,  hours , minutes;

    static void timer_isr(void * context, alt_u32 id);

//converts a character of a number into its 7 segment 7 bits equivalent
int intTo7segment(char number){
   101bc:	213ff404 	addi	r4,r4,-48
   101c0:	21003fcc 	andi	r4,r4,255
   101c4:	00800244 	movi	r2,9
   101c8:	11000536 	bltu	r2,r4,101e0 <intTo7segment+0x24>
   101cc:	00800074 	movhi	r2,1
   101d0:	1085f104 	addi	r2,r2,6084
   101d4:	1109883a 	add	r4,r2,r4
   101d8:	20800003 	ldbu	r2,0(r4)
   101dc:	f800283a 	ret

	switch (number) {
   101e0:	00801fc4 	movi	r2,127
	  	    break;
	  default:
	    return 0b1111111;
	}

}
   101e4:	f800283a 	ret

000101e8 <displayHour>:

int displayHour(int hour, int minute){
   101e8:	defffb04 	addi	sp,sp,-20
   101ec:	dc000215 	stw	r16,8(sp)

char hStr[3] ;
char mStr[3] ;

sprintf(hStr,"%d",hour);
   101f0:	04000074 	movhi	r16,1
   101f4:	8405f004 	addi	r16,r16,6080
	    return 0b1111111;
	}

}

int displayHour(int hour, int minute){
   101f8:	dc400315 	stw	r17,12(sp)

char hStr[3] ;
char mStr[3] ;

sprintf(hStr,"%d",hour);
   101fc:	200d883a 	mov	r6,r4
	    return 0b1111111;
	}

}

int displayHour(int hour, int minute){
   10200:	2823883a 	mov	r17,r5

char hStr[3] ;
char mStr[3] ;

sprintf(hStr,"%d",hour);
   10204:	d90000c4 	addi	r4,sp,3
   10208:	800b883a 	mov	r5,r16
	    return 0b1111111;
	}

}

int displayHour(int hour, int minute){
   1020c:	dfc00415 	stw	ra,16(sp)

char hStr[3] ;
char mStr[3] ;

sprintf(hStr,"%d",hour);
   10210:	00104840 	call	10484 <sprintf>
sprintf(mStr,"%d",minute);
   10214:	800b883a 	mov	r5,r16
   10218:	880d883a 	mov	r6,r17
   1021c:	d809883a 	mov	r4,sp
   10220:	00104840 	call	10484 <sprintf>


*segment1 = intTo7segment(mStr[1]);
   10224:	d9000047 	ldb	r4,1(sp)
   10228:	d4200917 	ldw	r16,-32732(gp)
   1022c:	00101bc0 	call	101bc <intTo7segment>
   10230:	8080000d 	sth	r2,0(r16)
*segment2 = intTo7segment(mStr[0]);
   10234:	d9000007 	ldb	r4,0(sp)
   10238:	d4200817 	ldw	r16,-32736(gp)
   1023c:	00101bc0 	call	101bc <intTo7segment>
   10240:	8080000d 	sth	r2,0(r16)
*segment3 = intTo7segment(hStr[1]);
   10244:	d9000107 	ldb	r4,4(sp)
   10248:	d4200717 	ldw	r16,-32740(gp)
   1024c:	00101bc0 	call	101bc <intTo7segment>
   10250:	8080000d 	sth	r2,0(r16)
*segment4 = intTo7segment(hStr[0]);
   10254:	d90000c7 	ldb	r4,3(sp)
   10258:	d4200617 	ldw	r16,-32744(gp)
   1025c:	00101bc0 	call	101bc <intTo7segment>
   10260:	8080000d 	sth	r2,0(r16)

}
   10264:	dfc00417 	ldw	ra,16(sp)
   10268:	dc400317 	ldw	r17,12(sp)
   1026c:	dc000217 	ldw	r16,8(sp)
   10270:	dec00504 	addi	sp,sp,20
   10274:	f800283a 	ret

00010278 <timer_isr>:
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
}



static void timer_isr(void * context, alt_u32 id){
   10278:	deffff04 	addi	sp,sp,-4

	static int count = 0;


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE,0);
   1027c:	008000b4 	movhi	r2,2
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
}



static void timer_isr(void * context, alt_u32 id){
   10280:	dfc00015 	stw	ra,0(sp)

	static int count = 0;


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE,0);
   10284:	10840004 	addi	r2,r2,4096
   10288:	10000035 	stwio	zero,0(r2)

	if(count%4 == 0){
   1028c:	d0a05617 	ldw	r2,-32424(gp)
   10290:	108000cc 	andi	r2,r2,3
   10294:	1000031e 	bne	r2,zero,102a4 <timer_isr+0x2c>
			seconds++;
   10298:	d0a05717 	ldw	r2,-32420(gp)
   1029c:	10800044 	addi	r2,r2,1
   102a0:	d0a05715 	stw	r2,-32420(gp)
		}
	displayHour(hours,minutes);
   102a4:	d1605817 	ldw	r5,-32416(gp)
   102a8:	d1205917 	ldw	r4,-32412(gp)
   102ac:	00101e80 	call	101e8 <displayHour>
	printf("\nTimer expired: %d",count++);
   102b0:	d1605617 	ldw	r5,-32424(gp)
   102b4:	01000074 	movhi	r4,1
   102b8:	2105ec04 	addi	r4,r4,6064
   102bc:	28800044 	addi	r2,r5,1
   102c0:	d0a05615 	stw	r2,-32424(gp)



}
   102c4:	dfc00017 	ldw	ra,0(sp)
   102c8:	dec00104 	addi	sp,sp,4

	if(count%4 == 0){
			seconds++;
		}
	displayHour(hours,minutes);
	printf("\nTimer expired: %d",count++);
   102cc:	00103d41 	jmpi	103d4 <printf>

000102d0 <init_timer_interrupt>:

}



void init_timer_interrupt(void ){
   102d0:	defffe04 	addi	sp,sp,-8


	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_IRQ, (void *)timer_isr,NULL,0x0);
   102d4:	01800074 	movhi	r6,1
   102d8:	d8000015 	stw	zero,0(sp)
   102dc:	000f883a 	mov	r7,zero
   102e0:	31809e04 	addi	r6,r6,632
   102e4:	01400044 	movi	r5,1
   102e8:	0009883a 	mov	r4,zero

}



void init_timer_interrupt(void ){
   102ec:	dfc00115 	stw	ra,4(sp)


	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_IRQ, (void *)timer_isr,NULL,0x0);
   102f0:	00114740 	call	11474 <alt_ic_isr_register>

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
   102f4:	008000b4 	movhi	r2,2
   102f8:	10840104 	addi	r2,r2,4100
   102fc:	00c001c4 	movi	r3,7
   10300:	10c00035 	stwio	r3,0(r2)
			| ALTERA_AVALON_TIMER_CONTROL_START_MSK
			| ALTERA_AVALON_TIMER_CONTROL_ITO_MSK );
}
   10304:	dfc00117 	ldw	ra,4(sp)
   10308:	dec00204 	addi	sp,sp,8
   1030c:	f800283a 	ret

00010310 <main>:




int main()
{ 
   10310:	defffd04 	addi	sp,sp,-12
   10314:	dfc00215 	stw	ra,8(sp)
   10318:	dc400115 	stw	r17,4(sp)
   1031c:	dc000015 	stw	r16,0(sp)
  //alt_putstr("Hello from Nios II!\n");

	init_timer_interrupt();
   10320:	00102d00 	call	102d0 <init_timer_interrupt>

		hours = 0;
		minutes = 0;
		seconds = 0;

		displayHour(hours,minutes);
   10324:	000b883a 	mov	r5,zero
   10328:	0009883a 	mov	r4,zero


  /* Event loop never exits. */


		hours = 0;
   1032c:	d0205915 	stw	zero,-32412(gp)
		minutes = 0;
   10330:	d0205815 	stw	zero,-32416(gp)
		seconds = 0;
   10334:	d0205715 	stw	zero,-32420(gp)

	    		//alt_putstr("seconds passed:");
	    		//alt_putstr(seconds);
	    	  }

	  if(seconds == 60){
   10338:	04000f04 	movi	r16,60

		hours = 0;
		minutes = 0;
		seconds = 0;

		displayHour(hours,minutes);
   1033c:	00101e80 	call	101e8 <displayHour>

	  else if (minutes == 60){
		  hours++;
		  minutes = 0;
	  }
	  else if(hours == 24){
   10340:	04400604 	movi	r17,24
		displayHour(hours,minutes);


  while (1){

	  if (*button1 == 0){
   10344:	d0a00517 	ldw	r2,-32748(gp)
   10348:	d0e05817 	ldw	r3,-32416(gp)
   1034c:	1080000b 	ldhu	r2,0(r2)

	    		//alt_putstr("seconds passed:");
	    		//alt_putstr(seconds);
	    	  }

	  if(seconds == 60){
   10350:	d0a05717 	ldw	r2,-32420(gp)
   10354:	1400041e 	bne	r2,r16,10368 <main+0x58>
		  minutes ++;
   10358:	18c00044 	addi	r3,r3,1
   1035c:	d0e05815 	stw	r3,-32416(gp)
		  seconds = 0;
   10360:	d0205715 	stw	zero,-32420(gp)
   10364:	00000806 	br	10388 <main+0x78>
   10368:	d0a05917 	ldw	r2,-32412(gp)
	  }

	  else if (minutes == 60){
   1036c:	1c00041e 	bne	r3,r16,10380 <main+0x70>
		  hours++;
   10370:	10800044 	addi	r2,r2,1
   10374:	d0a05915 	stw	r2,-32412(gp)
		  minutes = 0;
   10378:	d0205815 	stw	zero,-32416(gp)
   1037c:	00000206 	br	10388 <main+0x78>
	  }
	  else if(hours == 24){
   10380:	1440011e 	bne	r2,r17,10388 <main+0x78>
		  hours = 0;
   10384:	d0205915 	stw	zero,-32412(gp)
	  }




  	  displayHour(hours,minutes);
   10388:	d1605817 	ldw	r5,-32416(gp)
   1038c:	d1205917 	ldw	r4,-32412(gp)
   10390:	00101e80 	call	101e8 <displayHour>


  }
   10394:	003feb06 	br	10344 <__alt_data_end+0xffff6344>

00010398 <_printf_r>:
   10398:	defffd04 	addi	sp,sp,-12
   1039c:	dfc00015 	stw	ra,0(sp)
   103a0:	d9800115 	stw	r6,4(sp)
   103a4:	d9c00215 	stw	r7,8(sp)
   103a8:	20c00217 	ldw	r3,8(r4)
   103ac:	01800074 	movhi	r6,1
   103b0:	31841904 	addi	r6,r6,4196
   103b4:	19800115 	stw	r6,4(r3)
   103b8:	280d883a 	mov	r6,r5
   103bc:	21400217 	ldw	r5,8(r4)
   103c0:	d9c00104 	addi	r7,sp,4
   103c4:	0010b1c0 	call	10b1c <___vfprintf_internal_r>
   103c8:	dfc00017 	ldw	ra,0(sp)
   103cc:	dec00304 	addi	sp,sp,12
   103d0:	f800283a 	ret

000103d4 <printf>:
   103d4:	defffc04 	addi	sp,sp,-16
   103d8:	dfc00015 	stw	ra,0(sp)
   103dc:	d9400115 	stw	r5,4(sp)
   103e0:	d9800215 	stw	r6,8(sp)
   103e4:	d9c00315 	stw	r7,12(sp)
   103e8:	00800074 	movhi	r2,1
   103ec:	10863704 	addi	r2,r2,6364
   103f0:	10800017 	ldw	r2,0(r2)
   103f4:	01400074 	movhi	r5,1
   103f8:	29441904 	addi	r5,r5,4196
   103fc:	10c00217 	ldw	r3,8(r2)
   10400:	d9800104 	addi	r6,sp,4
   10404:	19400115 	stw	r5,4(r3)
   10408:	200b883a 	mov	r5,r4
   1040c:	11000217 	ldw	r4,8(r2)
   10410:	00110480 	call	11048 <__vfprintf_internal>
   10414:	dfc00017 	ldw	ra,0(sp)
   10418:	dec00404 	addi	sp,sp,16
   1041c:	f800283a 	ret

00010420 <_sprintf_r>:
   10420:	defff704 	addi	sp,sp,-36
   10424:	dfc00715 	stw	ra,28(sp)
   10428:	d9c00815 	stw	r7,32(sp)
   1042c:	00808204 	movi	r2,520
   10430:	d880000d 	sth	r2,0(sp)
   10434:	00a00034 	movhi	r2,32768
   10438:	10bfffc4 	addi	r2,r2,-1
   1043c:	d8800515 	stw	r2,20(sp)
   10440:	d8800315 	stw	r2,12(sp)
   10444:	00bfffc4 	movi	r2,-1
   10448:	d880008d 	sth	r2,2(sp)
   1044c:	00800074 	movhi	r2,1
   10450:	d9400415 	stw	r5,16(sp)
   10454:	d9400215 	stw	r5,8(sp)
   10458:	10844704 	addi	r2,r2,4380
   1045c:	d9c00804 	addi	r7,sp,32
   10460:	d80b883a 	mov	r5,sp
   10464:	d8800115 	stw	r2,4(sp)
   10468:	d8000615 	stw	zero,24(sp)
   1046c:	00105680 	call	10568 <___svfprintf_internal_r>
   10470:	d8c00417 	ldw	r3,16(sp)
   10474:	18000005 	stb	zero,0(r3)
   10478:	dfc00717 	ldw	ra,28(sp)
   1047c:	dec00904 	addi	sp,sp,36
   10480:	f800283a 	ret

00010484 <sprintf>:
   10484:	defff604 	addi	sp,sp,-40
   10488:	dfc00715 	stw	ra,28(sp)
   1048c:	d9800815 	stw	r6,32(sp)
   10490:	d9c00915 	stw	r7,36(sp)
   10494:	00808204 	movi	r2,520
   10498:	d880000d 	sth	r2,0(sp)
   1049c:	00a00034 	movhi	r2,32768
   104a0:	10bfffc4 	addi	r2,r2,-1
   104a4:	d8800515 	stw	r2,20(sp)
   104a8:	d8800315 	stw	r2,12(sp)
   104ac:	00bfffc4 	movi	r2,-1
   104b0:	d880008d 	sth	r2,2(sp)
   104b4:	00800074 	movhi	r2,1
   104b8:	10844704 	addi	r2,r2,4380
   104bc:	d8800115 	stw	r2,4(sp)
   104c0:	00800074 	movhi	r2,1
   104c4:	10863704 	addi	r2,r2,6364
   104c8:	d9000415 	stw	r4,16(sp)
   104cc:	d9000215 	stw	r4,8(sp)
   104d0:	11000017 	ldw	r4,0(r2)
   104d4:	280d883a 	mov	r6,r5
   104d8:	d9c00804 	addi	r7,sp,32
   104dc:	d80b883a 	mov	r5,sp
   104e0:	d8000615 	stw	zero,24(sp)
   104e4:	00105680 	call	10568 <___svfprintf_internal_r>
   104e8:	d8c00417 	ldw	r3,16(sp)
   104ec:	18000005 	stb	zero,0(r3)
   104f0:	dfc00717 	ldw	ra,28(sp)
   104f4:	dec00a04 	addi	sp,sp,40
   104f8:	f800283a 	ret

000104fc <print_repeat>:
   104fc:	defffb04 	addi	sp,sp,-20
   10500:	dc800315 	stw	r18,12(sp)
   10504:	dc400215 	stw	r17,8(sp)
   10508:	dc000115 	stw	r16,4(sp)
   1050c:	dfc00415 	stw	ra,16(sp)
   10510:	2025883a 	mov	r18,r4
   10514:	2823883a 	mov	r17,r5
   10518:	d9800005 	stb	r6,0(sp)
   1051c:	3821883a 	mov	r16,r7
   10520:	04000a0e 	bge	zero,r16,1054c <print_repeat+0x50>
   10524:	88800117 	ldw	r2,4(r17)
   10528:	01c00044 	movi	r7,1
   1052c:	d80d883a 	mov	r6,sp
   10530:	880b883a 	mov	r5,r17
   10534:	9009883a 	mov	r4,r18
   10538:	103ee83a 	callr	r2
   1053c:	843fffc4 	addi	r16,r16,-1
   10540:	103ff726 	beq	r2,zero,10520 <__alt_data_end+0xffff6520>
   10544:	00bfffc4 	movi	r2,-1
   10548:	00000106 	br	10550 <print_repeat+0x54>
   1054c:	0005883a 	mov	r2,zero
   10550:	dfc00417 	ldw	ra,16(sp)
   10554:	dc800317 	ldw	r18,12(sp)
   10558:	dc400217 	ldw	r17,8(sp)
   1055c:	dc000117 	ldw	r16,4(sp)
   10560:	dec00504 	addi	sp,sp,20
   10564:	f800283a 	ret

00010568 <___svfprintf_internal_r>:
   10568:	deffe504 	addi	sp,sp,-108
   1056c:	d8c00804 	addi	r3,sp,32
   10570:	ddc01815 	stw	r23,96(sp)
   10574:	dd801715 	stw	r22,92(sp)
   10578:	dd401615 	stw	r21,88(sp)
   1057c:	dd001515 	stw	r20,84(sp)
   10580:	dcc01415 	stw	r19,80(sp)
   10584:	dc801315 	stw	r18,76(sp)
   10588:	dc401215 	stw	r17,72(sp)
   1058c:	dc001115 	stw	r16,68(sp)
   10590:	dfc01a15 	stw	ra,104(sp)
   10594:	df001915 	stw	fp,100(sp)
   10598:	2029883a 	mov	r20,r4
   1059c:	2823883a 	mov	r17,r5
   105a0:	382d883a 	mov	r22,r7
   105a4:	d9800f15 	stw	r6,60(sp)
   105a8:	0021883a 	mov	r16,zero
   105ac:	d8000e15 	stw	zero,56(sp)
   105b0:	d8000a15 	stw	zero,40(sp)
   105b4:	002b883a 	mov	r21,zero
   105b8:	0027883a 	mov	r19,zero
   105bc:	0025883a 	mov	r18,zero
   105c0:	d8000c15 	stw	zero,48(sp)
   105c4:	d8000b15 	stw	zero,44(sp)
   105c8:	002f883a 	mov	r23,zero
   105cc:	d8c00915 	stw	r3,36(sp)
   105d0:	d8c00f17 	ldw	r3,60(sp)
   105d4:	19000003 	ldbu	r4,0(r3)
   105d8:	20803fcc 	andi	r2,r4,255
   105dc:	1080201c 	xori	r2,r2,128
   105e0:	10bfe004 	addi	r2,r2,-128
   105e4:	10011e26 	beq	r2,zero,10a60 <___svfprintf_internal_r+0x4f8>
   105e8:	00c00044 	movi	r3,1
   105ec:	b8c01426 	beq	r23,r3,10640 <___svfprintf_internal_r+0xd8>
   105f0:	1dc00216 	blt	r3,r23,105fc <___svfprintf_internal_r+0x94>
   105f4:	b8000626 	beq	r23,zero,10610 <___svfprintf_internal_r+0xa8>
   105f8:	00011506 	br	10a50 <___svfprintf_internal_r+0x4e8>
   105fc:	01400084 	movi	r5,2
   10600:	b9401d26 	beq	r23,r5,10678 <___svfprintf_internal_r+0x110>
   10604:	014000c4 	movi	r5,3
   10608:	b9402b26 	beq	r23,r5,106b8 <___svfprintf_internal_r+0x150>
   1060c:	00011006 	br	10a50 <___svfprintf_internal_r+0x4e8>
   10610:	01400944 	movi	r5,37
   10614:	1140fc26 	beq	r2,r5,10a08 <___svfprintf_internal_r+0x4a0>
   10618:	88800117 	ldw	r2,4(r17)
   1061c:	d9000005 	stb	r4,0(sp)
   10620:	01c00044 	movi	r7,1
   10624:	d80d883a 	mov	r6,sp
   10628:	880b883a 	mov	r5,r17
   1062c:	a009883a 	mov	r4,r20
   10630:	103ee83a 	callr	r2
   10634:	1000d81e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   10638:	84000044 	addi	r16,r16,1
   1063c:	00010406 	br	10a50 <___svfprintf_internal_r+0x4e8>
   10640:	01400c04 	movi	r5,48
   10644:	1140fa26 	beq	r2,r5,10a30 <___svfprintf_internal_r+0x4c8>
   10648:	01400944 	movi	r5,37
   1064c:	11400a1e 	bne	r2,r5,10678 <___svfprintf_internal_r+0x110>
   10650:	d8800005 	stb	r2,0(sp)
   10654:	88800117 	ldw	r2,4(r17)
   10658:	b80f883a 	mov	r7,r23
   1065c:	d80d883a 	mov	r6,sp
   10660:	880b883a 	mov	r5,r17
   10664:	a009883a 	mov	r4,r20
   10668:	103ee83a 	callr	r2
   1066c:	1000ca1e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   10670:	84000044 	addi	r16,r16,1
   10674:	0000f506 	br	10a4c <___svfprintf_internal_r+0x4e4>
   10678:	25fff404 	addi	r23,r4,-48
   1067c:	bdc03fcc 	andi	r23,r23,255
   10680:	00c00244 	movi	r3,9
   10684:	1dc00936 	bltu	r3,r23,106ac <___svfprintf_internal_r+0x144>
   10688:	00bfffc4 	movi	r2,-1
   1068c:	90800426 	beq	r18,r2,106a0 <___svfprintf_internal_r+0x138>
   10690:	01400284 	movi	r5,10
   10694:	9009883a 	mov	r4,r18
   10698:	001144c0 	call	1144c <__mulsi3>
   1069c:	00000106 	br	106a4 <___svfprintf_internal_r+0x13c>
   106a0:	0005883a 	mov	r2,zero
   106a4:	b8a5883a 	add	r18,r23,r2
   106a8:	0000e206 	br	10a34 <___svfprintf_internal_r+0x4cc>
   106ac:	01400b84 	movi	r5,46
   106b0:	1140e426 	beq	r2,r5,10a44 <___svfprintf_internal_r+0x4dc>
   106b4:	05c00084 	movi	r23,2
   106b8:	213ff404 	addi	r4,r4,-48
   106bc:	27003fcc 	andi	fp,r4,255
   106c0:	00c00244 	movi	r3,9
   106c4:	1f000936 	bltu	r3,fp,106ec <___svfprintf_internal_r+0x184>
   106c8:	00bfffc4 	movi	r2,-1
   106cc:	98800426 	beq	r19,r2,106e0 <___svfprintf_internal_r+0x178>
   106d0:	01400284 	movi	r5,10
   106d4:	9809883a 	mov	r4,r19
   106d8:	001144c0 	call	1144c <__mulsi3>
   106dc:	00000106 	br	106e4 <___svfprintf_internal_r+0x17c>
   106e0:	0005883a 	mov	r2,zero
   106e4:	e0a7883a 	add	r19,fp,r2
   106e8:	0000d906 	br	10a50 <___svfprintf_internal_r+0x4e8>
   106ec:	00c01b04 	movi	r3,108
   106f0:	10c0d226 	beq	r2,r3,10a3c <___svfprintf_internal_r+0x4d4>
   106f4:	013fffc4 	movi	r4,-1
   106f8:	99000226 	beq	r19,r4,10704 <___svfprintf_internal_r+0x19c>
   106fc:	d8000b15 	stw	zero,44(sp)
   10700:	00000106 	br	10708 <___svfprintf_internal_r+0x1a0>
   10704:	04c00044 	movi	r19,1
   10708:	01001a44 	movi	r4,105
   1070c:	11001626 	beq	r2,r4,10768 <___svfprintf_internal_r+0x200>
   10710:	20800916 	blt	r4,r2,10738 <___svfprintf_internal_r+0x1d0>
   10714:	010018c4 	movi	r4,99
   10718:	11008826 	beq	r2,r4,1093c <___svfprintf_internal_r+0x3d4>
   1071c:	01001904 	movi	r4,100
   10720:	11001126 	beq	r2,r4,10768 <___svfprintf_internal_r+0x200>
   10724:	01001604 	movi	r4,88
   10728:	1100c81e 	bne	r2,r4,10a4c <___svfprintf_internal_r+0x4e4>
   1072c:	00c00044 	movi	r3,1
   10730:	d8c00e15 	stw	r3,56(sp)
   10734:	00001506 	br	1078c <___svfprintf_internal_r+0x224>
   10738:	01001cc4 	movi	r4,115
   1073c:	11009826 	beq	r2,r4,109a0 <___svfprintf_internal_r+0x438>
   10740:	20800416 	blt	r4,r2,10754 <___svfprintf_internal_r+0x1ec>
   10744:	01001bc4 	movi	r4,111
   10748:	1100c01e 	bne	r2,r4,10a4c <___svfprintf_internal_r+0x4e4>
   1074c:	05400204 	movi	r21,8
   10750:	00000f06 	br	10790 <___svfprintf_internal_r+0x228>
   10754:	01001d44 	movi	r4,117
   10758:	11000d26 	beq	r2,r4,10790 <___svfprintf_internal_r+0x228>
   1075c:	01001e04 	movi	r4,120
   10760:	11000a26 	beq	r2,r4,1078c <___svfprintf_internal_r+0x224>
   10764:	0000b906 	br	10a4c <___svfprintf_internal_r+0x4e4>
   10768:	d8c00a17 	ldw	r3,40(sp)
   1076c:	b7000104 	addi	fp,r22,4
   10770:	18000726 	beq	r3,zero,10790 <___svfprintf_internal_r+0x228>
   10774:	df000d15 	stw	fp,52(sp)
   10778:	b5c00017 	ldw	r23,0(r22)
   1077c:	b800080e 	bge	r23,zero,107a0 <___svfprintf_internal_r+0x238>
   10780:	05efc83a 	sub	r23,zero,r23
   10784:	02400044 	movi	r9,1
   10788:	00000606 	br	107a4 <___svfprintf_internal_r+0x23c>
   1078c:	05400404 	movi	r21,16
   10790:	b0c00104 	addi	r3,r22,4
   10794:	d8c00d15 	stw	r3,52(sp)
   10798:	b5c00017 	ldw	r23,0(r22)
   1079c:	d8000a15 	stw	zero,40(sp)
   107a0:	0013883a 	mov	r9,zero
   107a4:	d839883a 	mov	fp,sp
   107a8:	b8001726 	beq	r23,zero,10808 <___svfprintf_internal_r+0x2a0>
   107ac:	a80b883a 	mov	r5,r21
   107b0:	b809883a 	mov	r4,r23
   107b4:	da401015 	stw	r9,64(sp)
   107b8:	00113900 	call	11390 <__udivsi3>
   107bc:	a80b883a 	mov	r5,r21
   107c0:	1009883a 	mov	r4,r2
   107c4:	102d883a 	mov	r22,r2
   107c8:	001144c0 	call	1144c <__mulsi3>
   107cc:	b885c83a 	sub	r2,r23,r2
   107d0:	00c00244 	movi	r3,9
   107d4:	da401017 	ldw	r9,64(sp)
   107d8:	18800216 	blt	r3,r2,107e4 <___svfprintf_internal_r+0x27c>
   107dc:	10800c04 	addi	r2,r2,48
   107e0:	00000506 	br	107f8 <___svfprintf_internal_r+0x290>
   107e4:	d8c00e17 	ldw	r3,56(sp)
   107e8:	18000226 	beq	r3,zero,107f4 <___svfprintf_internal_r+0x28c>
   107ec:	10800dc4 	addi	r2,r2,55
   107f0:	00000106 	br	107f8 <___svfprintf_internal_r+0x290>
   107f4:	108015c4 	addi	r2,r2,87
   107f8:	e0800005 	stb	r2,0(fp)
   107fc:	b02f883a 	mov	r23,r22
   10800:	e7000044 	addi	fp,fp,1
   10804:	003fe806 	br	107a8 <__alt_data_end+0xffff67a8>
   10808:	e6efc83a 	sub	r23,fp,sp
   1080c:	9dc5c83a 	sub	r2,r19,r23
   10810:	0080090e 	bge	zero,r2,10838 <___svfprintf_internal_r+0x2d0>
   10814:	e085883a 	add	r2,fp,r2
   10818:	01400c04 	movi	r5,48
   1081c:	d8c00917 	ldw	r3,36(sp)
   10820:	e009883a 	mov	r4,fp
   10824:	e0c0032e 	bgeu	fp,r3,10834 <___svfprintf_internal_r+0x2cc>
   10828:	e7000044 	addi	fp,fp,1
   1082c:	21400005 	stb	r5,0(r4)
   10830:	e0bffa1e 	bne	fp,r2,1081c <__alt_data_end+0xffff681c>
   10834:	e6efc83a 	sub	r23,fp,sp
   10838:	d8c00b17 	ldw	r3,44(sp)
   1083c:	4dd1883a 	add	r8,r9,r23
   10840:	922dc83a 	sub	r22,r18,r8
   10844:	18001626 	beq	r3,zero,108a0 <___svfprintf_internal_r+0x338>
   10848:	48000a26 	beq	r9,zero,10874 <___svfprintf_internal_r+0x30c>
   1084c:	00800b44 	movi	r2,45
   10850:	d8800805 	stb	r2,32(sp)
   10854:	88800117 	ldw	r2,4(r17)
   10858:	01c00044 	movi	r7,1
   1085c:	d9800804 	addi	r6,sp,32
   10860:	880b883a 	mov	r5,r17
   10864:	a009883a 	mov	r4,r20
   10868:	103ee83a 	callr	r2
   1086c:	10004a1e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   10870:	84000044 	addi	r16,r16,1
   10874:	0580070e 	bge	zero,r22,10894 <___svfprintf_internal_r+0x32c>
   10878:	b00f883a 	mov	r7,r22
   1087c:	01800c04 	movi	r6,48
   10880:	880b883a 	mov	r5,r17
   10884:	a009883a 	mov	r4,r20
   10888:	00104fc0 	call	104fc <print_repeat>
   1088c:	1000421e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   10890:	85a1883a 	add	r16,r16,r22
   10894:	e02d883a 	mov	r22,fp
   10898:	bf2fc83a 	sub	r23,r23,fp
   1089c:	00002006 	br	10920 <___svfprintf_internal_r+0x3b8>
   108a0:	0580090e 	bge	zero,r22,108c8 <___svfprintf_internal_r+0x360>
   108a4:	b00f883a 	mov	r7,r22
   108a8:	01800804 	movi	r6,32
   108ac:	880b883a 	mov	r5,r17
   108b0:	a009883a 	mov	r4,r20
   108b4:	da401015 	stw	r9,64(sp)
   108b8:	00104fc0 	call	104fc <print_repeat>
   108bc:	da401017 	ldw	r9,64(sp)
   108c0:	1000351e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   108c4:	85a1883a 	add	r16,r16,r22
   108c8:	483ff226 	beq	r9,zero,10894 <__alt_data_end+0xffff6894>
   108cc:	00800b44 	movi	r2,45
   108d0:	d8800805 	stb	r2,32(sp)
   108d4:	88800117 	ldw	r2,4(r17)
   108d8:	01c00044 	movi	r7,1
   108dc:	d9800804 	addi	r6,sp,32
   108e0:	880b883a 	mov	r5,r17
   108e4:	a009883a 	mov	r4,r20
   108e8:	103ee83a 	callr	r2
   108ec:	10002a1e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   108f0:	84000044 	addi	r16,r16,1
   108f4:	003fe706 	br	10894 <__alt_data_end+0xffff6894>
   108f8:	b5bfffc4 	addi	r22,r22,-1
   108fc:	b0800003 	ldbu	r2,0(r22)
   10900:	01c00044 	movi	r7,1
   10904:	d9800804 	addi	r6,sp,32
   10908:	d8800805 	stb	r2,32(sp)
   1090c:	88800117 	ldw	r2,4(r17)
   10910:	880b883a 	mov	r5,r17
   10914:	a009883a 	mov	r4,r20
   10918:	103ee83a 	callr	r2
   1091c:	10001e1e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   10920:	8585c83a 	sub	r2,r16,r22
   10924:	b5c9883a 	add	r4,r22,r23
   10928:	e085883a 	add	r2,fp,r2
   1092c:	013ff216 	blt	zero,r4,108f8 <__alt_data_end+0xffff68f8>
   10930:	1021883a 	mov	r16,r2
   10934:	dd800d17 	ldw	r22,52(sp)
   10938:	00004406 	br	10a4c <___svfprintf_internal_r+0x4e4>
   1093c:	00800044 	movi	r2,1
   10940:	1480080e 	bge	r2,r18,10964 <___svfprintf_internal_r+0x3fc>
   10944:	95ffffc4 	addi	r23,r18,-1
   10948:	b80f883a 	mov	r7,r23
   1094c:	01800804 	movi	r6,32
   10950:	880b883a 	mov	r5,r17
   10954:	a009883a 	mov	r4,r20
   10958:	00104fc0 	call	104fc <print_repeat>
   1095c:	10000e1e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   10960:	85e1883a 	add	r16,r16,r23
   10964:	b0800017 	ldw	r2,0(r22)
   10968:	01c00044 	movi	r7,1
   1096c:	d80d883a 	mov	r6,sp
   10970:	d8800005 	stb	r2,0(sp)
   10974:	88800117 	ldw	r2,4(r17)
   10978:	880b883a 	mov	r5,r17
   1097c:	a009883a 	mov	r4,r20
   10980:	b5c00104 	addi	r23,r22,4
   10984:	103ee83a 	callr	r2
   10988:	1000031e 	bne	r2,zero,10998 <___svfprintf_internal_r+0x430>
   1098c:	84000044 	addi	r16,r16,1
   10990:	b82d883a 	mov	r22,r23
   10994:	00002d06 	br	10a4c <___svfprintf_internal_r+0x4e4>
   10998:	00bfffc4 	movi	r2,-1
   1099c:	00003106 	br	10a64 <___svfprintf_internal_r+0x4fc>
   109a0:	b5c00017 	ldw	r23,0(r22)
   109a4:	b7000104 	addi	fp,r22,4
   109a8:	b809883a 	mov	r4,r23
   109ac:	00112240 	call	11224 <strlen>
   109b0:	9091c83a 	sub	r8,r18,r2
   109b4:	102d883a 	mov	r22,r2
   109b8:	0200090e 	bge	zero,r8,109e0 <___svfprintf_internal_r+0x478>
   109bc:	400f883a 	mov	r7,r8
   109c0:	01800804 	movi	r6,32
   109c4:	880b883a 	mov	r5,r17
   109c8:	a009883a 	mov	r4,r20
   109cc:	da001015 	stw	r8,64(sp)
   109d0:	00104fc0 	call	104fc <print_repeat>
   109d4:	da001017 	ldw	r8,64(sp)
   109d8:	103fef1e 	bne	r2,zero,10998 <__alt_data_end+0xffff6998>
   109dc:	8221883a 	add	r16,r16,r8
   109e0:	88800117 	ldw	r2,4(r17)
   109e4:	b00f883a 	mov	r7,r22
   109e8:	b80d883a 	mov	r6,r23
   109ec:	880b883a 	mov	r5,r17
   109f0:	a009883a 	mov	r4,r20
   109f4:	103ee83a 	callr	r2
   109f8:	103fe71e 	bne	r2,zero,10998 <__alt_data_end+0xffff6998>
   109fc:	85a1883a 	add	r16,r16,r22
   10a00:	e02d883a 	mov	r22,fp
   10a04:	00001106 	br	10a4c <___svfprintf_internal_r+0x4e4>
   10a08:	00c00044 	movi	r3,1
   10a0c:	04ffffc4 	movi	r19,-1
   10a10:	d8000e15 	stw	zero,56(sp)
   10a14:	d8c00a15 	stw	r3,40(sp)
   10a18:	05400284 	movi	r21,10
   10a1c:	9825883a 	mov	r18,r19
   10a20:	d8000c15 	stw	zero,48(sp)
   10a24:	d8000b15 	stw	zero,44(sp)
   10a28:	182f883a 	mov	r23,r3
   10a2c:	00000806 	br	10a50 <___svfprintf_internal_r+0x4e8>
   10a30:	ddc00b15 	stw	r23,44(sp)
   10a34:	05c00084 	movi	r23,2
   10a38:	00000506 	br	10a50 <___svfprintf_internal_r+0x4e8>
   10a3c:	00c00044 	movi	r3,1
   10a40:	d8c00c15 	stw	r3,48(sp)
   10a44:	05c000c4 	movi	r23,3
   10a48:	00000106 	br	10a50 <___svfprintf_internal_r+0x4e8>
   10a4c:	002f883a 	mov	r23,zero
   10a50:	d8c00f17 	ldw	r3,60(sp)
   10a54:	18c00044 	addi	r3,r3,1
   10a58:	d8c00f15 	stw	r3,60(sp)
   10a5c:	003edc06 	br	105d0 <__alt_data_end+0xffff65d0>
   10a60:	8005883a 	mov	r2,r16
   10a64:	dfc01a17 	ldw	ra,104(sp)
   10a68:	df001917 	ldw	fp,100(sp)
   10a6c:	ddc01817 	ldw	r23,96(sp)
   10a70:	dd801717 	ldw	r22,92(sp)
   10a74:	dd401617 	ldw	r21,88(sp)
   10a78:	dd001517 	ldw	r20,84(sp)
   10a7c:	dcc01417 	ldw	r19,80(sp)
   10a80:	dc801317 	ldw	r18,76(sp)
   10a84:	dc401217 	ldw	r17,72(sp)
   10a88:	dc001117 	ldw	r16,68(sp)
   10a8c:	dec01b04 	addi	sp,sp,108
   10a90:	f800283a 	ret

00010a94 <__vfprintf_internal_unused>:
   10a94:	00800074 	movhi	r2,1
   10a98:	10863704 	addi	r2,r2,6364
   10a9c:	300f883a 	mov	r7,r6
   10aa0:	280d883a 	mov	r6,r5
   10aa4:	200b883a 	mov	r5,r4
   10aa8:	11000017 	ldw	r4,0(r2)
   10aac:	00105681 	jmpi	10568 <___svfprintf_internal_r>

00010ab0 <print_repeat>:
   10ab0:	defffb04 	addi	sp,sp,-20
   10ab4:	dc800315 	stw	r18,12(sp)
   10ab8:	dc400215 	stw	r17,8(sp)
   10abc:	dc000115 	stw	r16,4(sp)
   10ac0:	dfc00415 	stw	ra,16(sp)
   10ac4:	2025883a 	mov	r18,r4
   10ac8:	2823883a 	mov	r17,r5
   10acc:	d9800005 	stb	r6,0(sp)
   10ad0:	3821883a 	mov	r16,r7
   10ad4:	04000a0e 	bge	zero,r16,10b00 <print_repeat+0x50>
   10ad8:	88800117 	ldw	r2,4(r17)
   10adc:	01c00044 	movi	r7,1
   10ae0:	d80d883a 	mov	r6,sp
   10ae4:	880b883a 	mov	r5,r17
   10ae8:	9009883a 	mov	r4,r18
   10aec:	103ee83a 	callr	r2
   10af0:	843fffc4 	addi	r16,r16,-1
   10af4:	103ff726 	beq	r2,zero,10ad4 <__alt_data_end+0xffff6ad4>
   10af8:	00bfffc4 	movi	r2,-1
   10afc:	00000106 	br	10b04 <print_repeat+0x54>
   10b00:	0005883a 	mov	r2,zero
   10b04:	dfc00417 	ldw	ra,16(sp)
   10b08:	dc800317 	ldw	r18,12(sp)
   10b0c:	dc400217 	ldw	r17,8(sp)
   10b10:	dc000117 	ldw	r16,4(sp)
   10b14:	dec00504 	addi	sp,sp,20
   10b18:	f800283a 	ret

00010b1c <___vfprintf_internal_r>:
   10b1c:	deffe504 	addi	sp,sp,-108
   10b20:	d8c00804 	addi	r3,sp,32
   10b24:	ddc01815 	stw	r23,96(sp)
   10b28:	dd801715 	stw	r22,92(sp)
   10b2c:	dd401615 	stw	r21,88(sp)
   10b30:	dd001515 	stw	r20,84(sp)
   10b34:	dcc01415 	stw	r19,80(sp)
   10b38:	dc801315 	stw	r18,76(sp)
   10b3c:	dc401215 	stw	r17,72(sp)
   10b40:	dc001115 	stw	r16,68(sp)
   10b44:	dfc01a15 	stw	ra,104(sp)
   10b48:	df001915 	stw	fp,100(sp)
   10b4c:	2029883a 	mov	r20,r4
   10b50:	2823883a 	mov	r17,r5
   10b54:	382d883a 	mov	r22,r7
   10b58:	d9800f15 	stw	r6,60(sp)
   10b5c:	0021883a 	mov	r16,zero
   10b60:	d8000e15 	stw	zero,56(sp)
   10b64:	d8000a15 	stw	zero,40(sp)
   10b68:	002b883a 	mov	r21,zero
   10b6c:	0027883a 	mov	r19,zero
   10b70:	0025883a 	mov	r18,zero
   10b74:	d8000c15 	stw	zero,48(sp)
   10b78:	d8000b15 	stw	zero,44(sp)
   10b7c:	002f883a 	mov	r23,zero
   10b80:	d8c00915 	stw	r3,36(sp)
   10b84:	d8c00f17 	ldw	r3,60(sp)
   10b88:	19000003 	ldbu	r4,0(r3)
   10b8c:	20803fcc 	andi	r2,r4,255
   10b90:	1080201c 	xori	r2,r2,128
   10b94:	10bfe004 	addi	r2,r2,-128
   10b98:	10011e26 	beq	r2,zero,11014 <___vfprintf_internal_r+0x4f8>
   10b9c:	00c00044 	movi	r3,1
   10ba0:	b8c01426 	beq	r23,r3,10bf4 <___vfprintf_internal_r+0xd8>
   10ba4:	1dc00216 	blt	r3,r23,10bb0 <___vfprintf_internal_r+0x94>
   10ba8:	b8000626 	beq	r23,zero,10bc4 <___vfprintf_internal_r+0xa8>
   10bac:	00011506 	br	11004 <___vfprintf_internal_r+0x4e8>
   10bb0:	01400084 	movi	r5,2
   10bb4:	b9401d26 	beq	r23,r5,10c2c <___vfprintf_internal_r+0x110>
   10bb8:	014000c4 	movi	r5,3
   10bbc:	b9402b26 	beq	r23,r5,10c6c <___vfprintf_internal_r+0x150>
   10bc0:	00011006 	br	11004 <___vfprintf_internal_r+0x4e8>
   10bc4:	01400944 	movi	r5,37
   10bc8:	1140fc26 	beq	r2,r5,10fbc <___vfprintf_internal_r+0x4a0>
   10bcc:	88800117 	ldw	r2,4(r17)
   10bd0:	d9000005 	stb	r4,0(sp)
   10bd4:	01c00044 	movi	r7,1
   10bd8:	d80d883a 	mov	r6,sp
   10bdc:	880b883a 	mov	r5,r17
   10be0:	a009883a 	mov	r4,r20
   10be4:	103ee83a 	callr	r2
   10be8:	1000d81e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10bec:	84000044 	addi	r16,r16,1
   10bf0:	00010406 	br	11004 <___vfprintf_internal_r+0x4e8>
   10bf4:	01400c04 	movi	r5,48
   10bf8:	1140fa26 	beq	r2,r5,10fe4 <___vfprintf_internal_r+0x4c8>
   10bfc:	01400944 	movi	r5,37
   10c00:	11400a1e 	bne	r2,r5,10c2c <___vfprintf_internal_r+0x110>
   10c04:	d8800005 	stb	r2,0(sp)
   10c08:	88800117 	ldw	r2,4(r17)
   10c0c:	b80f883a 	mov	r7,r23
   10c10:	d80d883a 	mov	r6,sp
   10c14:	880b883a 	mov	r5,r17
   10c18:	a009883a 	mov	r4,r20
   10c1c:	103ee83a 	callr	r2
   10c20:	1000ca1e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10c24:	84000044 	addi	r16,r16,1
   10c28:	0000f506 	br	11000 <___vfprintf_internal_r+0x4e4>
   10c2c:	25fff404 	addi	r23,r4,-48
   10c30:	bdc03fcc 	andi	r23,r23,255
   10c34:	00c00244 	movi	r3,9
   10c38:	1dc00936 	bltu	r3,r23,10c60 <___vfprintf_internal_r+0x144>
   10c3c:	00bfffc4 	movi	r2,-1
   10c40:	90800426 	beq	r18,r2,10c54 <___vfprintf_internal_r+0x138>
   10c44:	01400284 	movi	r5,10
   10c48:	9009883a 	mov	r4,r18
   10c4c:	001144c0 	call	1144c <__mulsi3>
   10c50:	00000106 	br	10c58 <___vfprintf_internal_r+0x13c>
   10c54:	0005883a 	mov	r2,zero
   10c58:	b8a5883a 	add	r18,r23,r2
   10c5c:	0000e206 	br	10fe8 <___vfprintf_internal_r+0x4cc>
   10c60:	01400b84 	movi	r5,46
   10c64:	1140e426 	beq	r2,r5,10ff8 <___vfprintf_internal_r+0x4dc>
   10c68:	05c00084 	movi	r23,2
   10c6c:	213ff404 	addi	r4,r4,-48
   10c70:	27003fcc 	andi	fp,r4,255
   10c74:	00c00244 	movi	r3,9
   10c78:	1f000936 	bltu	r3,fp,10ca0 <___vfprintf_internal_r+0x184>
   10c7c:	00bfffc4 	movi	r2,-1
   10c80:	98800426 	beq	r19,r2,10c94 <___vfprintf_internal_r+0x178>
   10c84:	01400284 	movi	r5,10
   10c88:	9809883a 	mov	r4,r19
   10c8c:	001144c0 	call	1144c <__mulsi3>
   10c90:	00000106 	br	10c98 <___vfprintf_internal_r+0x17c>
   10c94:	0005883a 	mov	r2,zero
   10c98:	e0a7883a 	add	r19,fp,r2
   10c9c:	0000d906 	br	11004 <___vfprintf_internal_r+0x4e8>
   10ca0:	00c01b04 	movi	r3,108
   10ca4:	10c0d226 	beq	r2,r3,10ff0 <___vfprintf_internal_r+0x4d4>
   10ca8:	013fffc4 	movi	r4,-1
   10cac:	99000226 	beq	r19,r4,10cb8 <___vfprintf_internal_r+0x19c>
   10cb0:	d8000b15 	stw	zero,44(sp)
   10cb4:	00000106 	br	10cbc <___vfprintf_internal_r+0x1a0>
   10cb8:	04c00044 	movi	r19,1
   10cbc:	01001a44 	movi	r4,105
   10cc0:	11001626 	beq	r2,r4,10d1c <___vfprintf_internal_r+0x200>
   10cc4:	20800916 	blt	r4,r2,10cec <___vfprintf_internal_r+0x1d0>
   10cc8:	010018c4 	movi	r4,99
   10ccc:	11008826 	beq	r2,r4,10ef0 <___vfprintf_internal_r+0x3d4>
   10cd0:	01001904 	movi	r4,100
   10cd4:	11001126 	beq	r2,r4,10d1c <___vfprintf_internal_r+0x200>
   10cd8:	01001604 	movi	r4,88
   10cdc:	1100c81e 	bne	r2,r4,11000 <___vfprintf_internal_r+0x4e4>
   10ce0:	00c00044 	movi	r3,1
   10ce4:	d8c00e15 	stw	r3,56(sp)
   10ce8:	00001506 	br	10d40 <___vfprintf_internal_r+0x224>
   10cec:	01001cc4 	movi	r4,115
   10cf0:	11009826 	beq	r2,r4,10f54 <___vfprintf_internal_r+0x438>
   10cf4:	20800416 	blt	r4,r2,10d08 <___vfprintf_internal_r+0x1ec>
   10cf8:	01001bc4 	movi	r4,111
   10cfc:	1100c01e 	bne	r2,r4,11000 <___vfprintf_internal_r+0x4e4>
   10d00:	05400204 	movi	r21,8
   10d04:	00000f06 	br	10d44 <___vfprintf_internal_r+0x228>
   10d08:	01001d44 	movi	r4,117
   10d0c:	11000d26 	beq	r2,r4,10d44 <___vfprintf_internal_r+0x228>
   10d10:	01001e04 	movi	r4,120
   10d14:	11000a26 	beq	r2,r4,10d40 <___vfprintf_internal_r+0x224>
   10d18:	0000b906 	br	11000 <___vfprintf_internal_r+0x4e4>
   10d1c:	d8c00a17 	ldw	r3,40(sp)
   10d20:	b7000104 	addi	fp,r22,4
   10d24:	18000726 	beq	r3,zero,10d44 <___vfprintf_internal_r+0x228>
   10d28:	df000d15 	stw	fp,52(sp)
   10d2c:	b5c00017 	ldw	r23,0(r22)
   10d30:	b800080e 	bge	r23,zero,10d54 <___vfprintf_internal_r+0x238>
   10d34:	05efc83a 	sub	r23,zero,r23
   10d38:	02400044 	movi	r9,1
   10d3c:	00000606 	br	10d58 <___vfprintf_internal_r+0x23c>
   10d40:	05400404 	movi	r21,16
   10d44:	b0c00104 	addi	r3,r22,4
   10d48:	d8c00d15 	stw	r3,52(sp)
   10d4c:	b5c00017 	ldw	r23,0(r22)
   10d50:	d8000a15 	stw	zero,40(sp)
   10d54:	0013883a 	mov	r9,zero
   10d58:	d839883a 	mov	fp,sp
   10d5c:	b8001726 	beq	r23,zero,10dbc <___vfprintf_internal_r+0x2a0>
   10d60:	a80b883a 	mov	r5,r21
   10d64:	b809883a 	mov	r4,r23
   10d68:	da401015 	stw	r9,64(sp)
   10d6c:	00113900 	call	11390 <__udivsi3>
   10d70:	a80b883a 	mov	r5,r21
   10d74:	1009883a 	mov	r4,r2
   10d78:	102d883a 	mov	r22,r2
   10d7c:	001144c0 	call	1144c <__mulsi3>
   10d80:	b885c83a 	sub	r2,r23,r2
   10d84:	00c00244 	movi	r3,9
   10d88:	da401017 	ldw	r9,64(sp)
   10d8c:	18800216 	blt	r3,r2,10d98 <___vfprintf_internal_r+0x27c>
   10d90:	10800c04 	addi	r2,r2,48
   10d94:	00000506 	br	10dac <___vfprintf_internal_r+0x290>
   10d98:	d8c00e17 	ldw	r3,56(sp)
   10d9c:	18000226 	beq	r3,zero,10da8 <___vfprintf_internal_r+0x28c>
   10da0:	10800dc4 	addi	r2,r2,55
   10da4:	00000106 	br	10dac <___vfprintf_internal_r+0x290>
   10da8:	108015c4 	addi	r2,r2,87
   10dac:	e0800005 	stb	r2,0(fp)
   10db0:	b02f883a 	mov	r23,r22
   10db4:	e7000044 	addi	fp,fp,1
   10db8:	003fe806 	br	10d5c <__alt_data_end+0xffff6d5c>
   10dbc:	e6efc83a 	sub	r23,fp,sp
   10dc0:	9dc5c83a 	sub	r2,r19,r23
   10dc4:	0080090e 	bge	zero,r2,10dec <___vfprintf_internal_r+0x2d0>
   10dc8:	e085883a 	add	r2,fp,r2
   10dcc:	01400c04 	movi	r5,48
   10dd0:	d8c00917 	ldw	r3,36(sp)
   10dd4:	e009883a 	mov	r4,fp
   10dd8:	e0c0032e 	bgeu	fp,r3,10de8 <___vfprintf_internal_r+0x2cc>
   10ddc:	e7000044 	addi	fp,fp,1
   10de0:	21400005 	stb	r5,0(r4)
   10de4:	e0bffa1e 	bne	fp,r2,10dd0 <__alt_data_end+0xffff6dd0>
   10de8:	e6efc83a 	sub	r23,fp,sp
   10dec:	d8c00b17 	ldw	r3,44(sp)
   10df0:	4dd1883a 	add	r8,r9,r23
   10df4:	922dc83a 	sub	r22,r18,r8
   10df8:	18001626 	beq	r3,zero,10e54 <___vfprintf_internal_r+0x338>
   10dfc:	48000a26 	beq	r9,zero,10e28 <___vfprintf_internal_r+0x30c>
   10e00:	00800b44 	movi	r2,45
   10e04:	d8800805 	stb	r2,32(sp)
   10e08:	88800117 	ldw	r2,4(r17)
   10e0c:	01c00044 	movi	r7,1
   10e10:	d9800804 	addi	r6,sp,32
   10e14:	880b883a 	mov	r5,r17
   10e18:	a009883a 	mov	r4,r20
   10e1c:	103ee83a 	callr	r2
   10e20:	10004a1e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10e24:	84000044 	addi	r16,r16,1
   10e28:	0580070e 	bge	zero,r22,10e48 <___vfprintf_internal_r+0x32c>
   10e2c:	b00f883a 	mov	r7,r22
   10e30:	01800c04 	movi	r6,48
   10e34:	880b883a 	mov	r5,r17
   10e38:	a009883a 	mov	r4,r20
   10e3c:	0010ab00 	call	10ab0 <print_repeat>
   10e40:	1000421e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10e44:	85a1883a 	add	r16,r16,r22
   10e48:	e02d883a 	mov	r22,fp
   10e4c:	bf2fc83a 	sub	r23,r23,fp
   10e50:	00002006 	br	10ed4 <___vfprintf_internal_r+0x3b8>
   10e54:	0580090e 	bge	zero,r22,10e7c <___vfprintf_internal_r+0x360>
   10e58:	b00f883a 	mov	r7,r22
   10e5c:	01800804 	movi	r6,32
   10e60:	880b883a 	mov	r5,r17
   10e64:	a009883a 	mov	r4,r20
   10e68:	da401015 	stw	r9,64(sp)
   10e6c:	0010ab00 	call	10ab0 <print_repeat>
   10e70:	da401017 	ldw	r9,64(sp)
   10e74:	1000351e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10e78:	85a1883a 	add	r16,r16,r22
   10e7c:	483ff226 	beq	r9,zero,10e48 <__alt_data_end+0xffff6e48>
   10e80:	00800b44 	movi	r2,45
   10e84:	d8800805 	stb	r2,32(sp)
   10e88:	88800117 	ldw	r2,4(r17)
   10e8c:	01c00044 	movi	r7,1
   10e90:	d9800804 	addi	r6,sp,32
   10e94:	880b883a 	mov	r5,r17
   10e98:	a009883a 	mov	r4,r20
   10e9c:	103ee83a 	callr	r2
   10ea0:	10002a1e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10ea4:	84000044 	addi	r16,r16,1
   10ea8:	003fe706 	br	10e48 <__alt_data_end+0xffff6e48>
   10eac:	b5bfffc4 	addi	r22,r22,-1
   10eb0:	b0800003 	ldbu	r2,0(r22)
   10eb4:	01c00044 	movi	r7,1
   10eb8:	d9800804 	addi	r6,sp,32
   10ebc:	d8800805 	stb	r2,32(sp)
   10ec0:	88800117 	ldw	r2,4(r17)
   10ec4:	880b883a 	mov	r5,r17
   10ec8:	a009883a 	mov	r4,r20
   10ecc:	103ee83a 	callr	r2
   10ed0:	10001e1e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10ed4:	8585c83a 	sub	r2,r16,r22
   10ed8:	b5c9883a 	add	r4,r22,r23
   10edc:	e085883a 	add	r2,fp,r2
   10ee0:	013ff216 	blt	zero,r4,10eac <__alt_data_end+0xffff6eac>
   10ee4:	1021883a 	mov	r16,r2
   10ee8:	dd800d17 	ldw	r22,52(sp)
   10eec:	00004406 	br	11000 <___vfprintf_internal_r+0x4e4>
   10ef0:	00800044 	movi	r2,1
   10ef4:	1480080e 	bge	r2,r18,10f18 <___vfprintf_internal_r+0x3fc>
   10ef8:	95ffffc4 	addi	r23,r18,-1
   10efc:	b80f883a 	mov	r7,r23
   10f00:	01800804 	movi	r6,32
   10f04:	880b883a 	mov	r5,r17
   10f08:	a009883a 	mov	r4,r20
   10f0c:	0010ab00 	call	10ab0 <print_repeat>
   10f10:	10000e1e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10f14:	85e1883a 	add	r16,r16,r23
   10f18:	b0800017 	ldw	r2,0(r22)
   10f1c:	01c00044 	movi	r7,1
   10f20:	d80d883a 	mov	r6,sp
   10f24:	d8800005 	stb	r2,0(sp)
   10f28:	88800117 	ldw	r2,4(r17)
   10f2c:	880b883a 	mov	r5,r17
   10f30:	a009883a 	mov	r4,r20
   10f34:	b5c00104 	addi	r23,r22,4
   10f38:	103ee83a 	callr	r2
   10f3c:	1000031e 	bne	r2,zero,10f4c <___vfprintf_internal_r+0x430>
   10f40:	84000044 	addi	r16,r16,1
   10f44:	b82d883a 	mov	r22,r23
   10f48:	00002d06 	br	11000 <___vfprintf_internal_r+0x4e4>
   10f4c:	00bfffc4 	movi	r2,-1
   10f50:	00003106 	br	11018 <___vfprintf_internal_r+0x4fc>
   10f54:	b5c00017 	ldw	r23,0(r22)
   10f58:	b7000104 	addi	fp,r22,4
   10f5c:	b809883a 	mov	r4,r23
   10f60:	00112240 	call	11224 <strlen>
   10f64:	9091c83a 	sub	r8,r18,r2
   10f68:	102d883a 	mov	r22,r2
   10f6c:	0200090e 	bge	zero,r8,10f94 <___vfprintf_internal_r+0x478>
   10f70:	400f883a 	mov	r7,r8
   10f74:	01800804 	movi	r6,32
   10f78:	880b883a 	mov	r5,r17
   10f7c:	a009883a 	mov	r4,r20
   10f80:	da001015 	stw	r8,64(sp)
   10f84:	0010ab00 	call	10ab0 <print_repeat>
   10f88:	da001017 	ldw	r8,64(sp)
   10f8c:	103fef1e 	bne	r2,zero,10f4c <__alt_data_end+0xffff6f4c>
   10f90:	8221883a 	add	r16,r16,r8
   10f94:	88800117 	ldw	r2,4(r17)
   10f98:	b00f883a 	mov	r7,r22
   10f9c:	b80d883a 	mov	r6,r23
   10fa0:	880b883a 	mov	r5,r17
   10fa4:	a009883a 	mov	r4,r20
   10fa8:	103ee83a 	callr	r2
   10fac:	103fe71e 	bne	r2,zero,10f4c <__alt_data_end+0xffff6f4c>
   10fb0:	85a1883a 	add	r16,r16,r22
   10fb4:	e02d883a 	mov	r22,fp
   10fb8:	00001106 	br	11000 <___vfprintf_internal_r+0x4e4>
   10fbc:	00c00044 	movi	r3,1
   10fc0:	04ffffc4 	movi	r19,-1
   10fc4:	d8000e15 	stw	zero,56(sp)
   10fc8:	d8c00a15 	stw	r3,40(sp)
   10fcc:	05400284 	movi	r21,10
   10fd0:	9825883a 	mov	r18,r19
   10fd4:	d8000c15 	stw	zero,48(sp)
   10fd8:	d8000b15 	stw	zero,44(sp)
   10fdc:	182f883a 	mov	r23,r3
   10fe0:	00000806 	br	11004 <___vfprintf_internal_r+0x4e8>
   10fe4:	ddc00b15 	stw	r23,44(sp)
   10fe8:	05c00084 	movi	r23,2
   10fec:	00000506 	br	11004 <___vfprintf_internal_r+0x4e8>
   10ff0:	00c00044 	movi	r3,1
   10ff4:	d8c00c15 	stw	r3,48(sp)
   10ff8:	05c000c4 	movi	r23,3
   10ffc:	00000106 	br	11004 <___vfprintf_internal_r+0x4e8>
   11000:	002f883a 	mov	r23,zero
   11004:	d8c00f17 	ldw	r3,60(sp)
   11008:	18c00044 	addi	r3,r3,1
   1100c:	d8c00f15 	stw	r3,60(sp)
   11010:	003edc06 	br	10b84 <__alt_data_end+0xffff6b84>
   11014:	8005883a 	mov	r2,r16
   11018:	dfc01a17 	ldw	ra,104(sp)
   1101c:	df001917 	ldw	fp,100(sp)
   11020:	ddc01817 	ldw	r23,96(sp)
   11024:	dd801717 	ldw	r22,92(sp)
   11028:	dd401617 	ldw	r21,88(sp)
   1102c:	dd001517 	ldw	r20,84(sp)
   11030:	dcc01417 	ldw	r19,80(sp)
   11034:	dc801317 	ldw	r18,76(sp)
   11038:	dc401217 	ldw	r17,72(sp)
   1103c:	dc001117 	ldw	r16,68(sp)
   11040:	dec01b04 	addi	sp,sp,108
   11044:	f800283a 	ret

00011048 <__vfprintf_internal>:
   11048:	00800074 	movhi	r2,1
   1104c:	10863704 	addi	r2,r2,6364
   11050:	300f883a 	mov	r7,r6
   11054:	280d883a 	mov	r6,r5
   11058:	200b883a 	mov	r5,r4
   1105c:	11000017 	ldw	r4,0(r2)
   11060:	0010b1c1 	jmpi	10b1c <___vfprintf_internal_r>

00011064 <__sfvwrite_small_dev>:
   11064:	2880000b 	ldhu	r2,0(r5)
   11068:	1080020c 	andi	r2,r2,8
   1106c:	10002126 	beq	r2,zero,110f4 <__sfvwrite_small_dev+0x90>
   11070:	2880008f 	ldh	r2,2(r5)
   11074:	defffa04 	addi	sp,sp,-24
   11078:	dc000015 	stw	r16,0(sp)
   1107c:	dfc00515 	stw	ra,20(sp)
   11080:	dd000415 	stw	r20,16(sp)
   11084:	dcc00315 	stw	r19,12(sp)
   11088:	dc800215 	stw	r18,8(sp)
   1108c:	dc400115 	stw	r17,4(sp)
   11090:	2821883a 	mov	r16,r5
   11094:	10001216 	blt	r2,zero,110e0 <__sfvwrite_small_dev+0x7c>
   11098:	2027883a 	mov	r19,r4
   1109c:	3025883a 	mov	r18,r6
   110a0:	3823883a 	mov	r17,r7
   110a4:	05010004 	movi	r20,1024
   110a8:	04400b0e 	bge	zero,r17,110d8 <__sfvwrite_small_dev+0x74>
   110ac:	880f883a 	mov	r7,r17
   110b0:	a440010e 	bge	r20,r17,110b8 <__sfvwrite_small_dev+0x54>
   110b4:	01c10004 	movi	r7,1024
   110b8:	8140008f 	ldh	r5,2(r16)
   110bc:	900d883a 	mov	r6,r18
   110c0:	9809883a 	mov	r4,r19
   110c4:	00112400 	call	11240 <_write_r>
   110c8:	0080050e 	bge	zero,r2,110e0 <__sfvwrite_small_dev+0x7c>
   110cc:	88a3c83a 	sub	r17,r17,r2
   110d0:	90a5883a 	add	r18,r18,r2
   110d4:	003ff406 	br	110a8 <__alt_data_end+0xffff70a8>
   110d8:	0005883a 	mov	r2,zero
   110dc:	00000706 	br	110fc <__sfvwrite_small_dev+0x98>
   110e0:	8080000b 	ldhu	r2,0(r16)
   110e4:	10801014 	ori	r2,r2,64
   110e8:	8080000d 	sth	r2,0(r16)
   110ec:	00bfffc4 	movi	r2,-1
   110f0:	00000206 	br	110fc <__sfvwrite_small_dev+0x98>
   110f4:	00bfffc4 	movi	r2,-1
   110f8:	f800283a 	ret
   110fc:	dfc00517 	ldw	ra,20(sp)
   11100:	dd000417 	ldw	r20,16(sp)
   11104:	dcc00317 	ldw	r19,12(sp)
   11108:	dc800217 	ldw	r18,8(sp)
   1110c:	dc400117 	ldw	r17,4(sp)
   11110:	dc000017 	ldw	r16,0(sp)
   11114:	dec00604 	addi	sp,sp,24
   11118:	f800283a 	ret

0001111c <__sfvwrite_small_str>:
   1111c:	2880000b 	ldhu	r2,0(r5)
   11120:	10c0020c 	andi	r3,r2,8
   11124:	18002026 	beq	r3,zero,111a8 <__sfvwrite_small_str+0x8c>
   11128:	28c0008f 	ldh	r3,2(r5)
   1112c:	defffd04 	addi	sp,sp,-12
   11130:	dc000015 	stw	r16,0(sp)
   11134:	dfc00215 	stw	ra,8(sp)
   11138:	dc400115 	stw	r17,4(sp)
   1113c:	2821883a 	mov	r16,r5
   11140:	1800150e 	bge	r3,zero,11198 <__sfvwrite_small_str+0x7c>
   11144:	10c0800c 	andi	r3,r2,512
   11148:	18001326 	beq	r3,zero,11198 <__sfvwrite_small_str+0x7c>
   1114c:	2c400517 	ldw	r17,20(r5)
   11150:	89c0030e 	bge	r17,r7,11160 <__sfvwrite_small_str+0x44>
   11154:	10c0200c 	andi	r3,r2,128
   11158:	18000326 	beq	r3,zero,11168 <__sfvwrite_small_str+0x4c>
   1115c:	00000e06 	br	11198 <__sfvwrite_small_str+0x7c>
   11160:	3c40010e 	bge	r7,r17,11168 <__sfvwrite_small_str+0x4c>
   11164:	3823883a 	mov	r17,r7
   11168:	81000417 	ldw	r4,16(r16)
   1116c:	300b883a 	mov	r5,r6
   11170:	880d883a 	mov	r6,r17
   11174:	00111c40 	call	111c4 <memmove>
   11178:	80800517 	ldw	r2,20(r16)
   1117c:	1445c83a 	sub	r2,r2,r17
   11180:	80800515 	stw	r2,20(r16)
   11184:	80800417 	ldw	r2,16(r16)
   11188:	1463883a 	add	r17,r2,r17
   1118c:	84400415 	stw	r17,16(r16)
   11190:	0005883a 	mov	r2,zero
   11194:	00000606 	br	111b0 <__sfvwrite_small_str+0x94>
   11198:	10801014 	ori	r2,r2,64
   1119c:	8080000d 	sth	r2,0(r16)
   111a0:	00bfffc4 	movi	r2,-1
   111a4:	00000206 	br	111b0 <__sfvwrite_small_str+0x94>
   111a8:	00bfffc4 	movi	r2,-1
   111ac:	f800283a 	ret
   111b0:	dfc00217 	ldw	ra,8(sp)
   111b4:	dc400117 	ldw	r17,4(sp)
   111b8:	dc000017 	ldw	r16,0(sp)
   111bc:	dec00304 	addi	sp,sp,12
   111c0:	f800283a 	ret

000111c4 <memmove>:
   111c4:	2005883a 	mov	r2,r4
   111c8:	218f883a 	add	r7,r4,r6
   111cc:	29000236 	bltu	r5,r4,111d8 <memmove+0x14>
   111d0:	1007883a 	mov	r3,r2
   111d4:	00000c06 	br	11208 <memmove+0x44>
   111d8:	2987883a 	add	r3,r5,r6
   111dc:	20fffc2e 	bgeu	r4,r3,111d0 <__alt_data_end+0xffff71d0>
   111e0:	380b883a 	mov	r5,r7
   111e4:	30cdc83a 	sub	r6,r6,r3
   111e8:	1989883a 	add	r4,r3,r6
   111ec:	20000526 	beq	r4,zero,11204 <memmove+0x40>
   111f0:	18ffffc4 	addi	r3,r3,-1
   111f4:	19000003 	ldbu	r4,0(r3)
   111f8:	297fffc4 	addi	r5,r5,-1
   111fc:	29000005 	stb	r4,0(r5)
   11200:	003ff906 	br	111e8 <__alt_data_end+0xffff71e8>
   11204:	f800283a 	ret
   11208:	19c00526 	beq	r3,r7,11220 <memmove+0x5c>
   1120c:	29000003 	ldbu	r4,0(r5)
   11210:	18c00044 	addi	r3,r3,1
   11214:	29400044 	addi	r5,r5,1
   11218:	193fffc5 	stb	r4,-1(r3)
   1121c:	003ffa06 	br	11208 <__alt_data_end+0xffff7208>
   11220:	f800283a 	ret

00011224 <strlen>:
   11224:	2005883a 	mov	r2,r4
   11228:	10c00007 	ldb	r3,0(r2)
   1122c:	18000226 	beq	r3,zero,11238 <strlen+0x14>
   11230:	10800044 	addi	r2,r2,1
   11234:	003ffc06 	br	11228 <__alt_data_end+0xffff7228>
   11238:	1105c83a 	sub	r2,r2,r4
   1123c:	f800283a 	ret

00011240 <_write_r>:
   11240:	defffd04 	addi	sp,sp,-12
   11244:	dc000015 	stw	r16,0(sp)
   11248:	04000074 	movhi	r16,1
   1124c:	dc400115 	stw	r17,4(sp)
   11250:	84068604 	addi	r16,r16,6680
   11254:	2023883a 	mov	r17,r4
   11258:	2809883a 	mov	r4,r5
   1125c:	300b883a 	mov	r5,r6
   11260:	380d883a 	mov	r6,r7
   11264:	dfc00215 	stw	ra,8(sp)
   11268:	80000015 	stw	zero,0(r16)
   1126c:	00116740 	call	11674 <write>
   11270:	00ffffc4 	movi	r3,-1
   11274:	10c0031e 	bne	r2,r3,11284 <_write_r+0x44>
   11278:	80c00017 	ldw	r3,0(r16)
   1127c:	18000126 	beq	r3,zero,11284 <_write_r+0x44>
   11280:	88c00015 	stw	r3,0(r17)
   11284:	dfc00217 	ldw	ra,8(sp)
   11288:	dc400117 	ldw	r17,4(sp)
   1128c:	dc000017 	ldw	r16,0(sp)
   11290:	dec00304 	addi	sp,sp,12
   11294:	f800283a 	ret

00011298 <__divsi3>:
   11298:	20001b16 	blt	r4,zero,11308 <__divsi3+0x70>
   1129c:	000f883a 	mov	r7,zero
   112a0:	28001616 	blt	r5,zero,112fc <__divsi3+0x64>
   112a4:	200d883a 	mov	r6,r4
   112a8:	29001a2e 	bgeu	r5,r4,11314 <__divsi3+0x7c>
   112ac:	00800804 	movi	r2,32
   112b0:	00c00044 	movi	r3,1
   112b4:	00000106 	br	112bc <__divsi3+0x24>
   112b8:	10000d26 	beq	r2,zero,112f0 <__divsi3+0x58>
   112bc:	294b883a 	add	r5,r5,r5
   112c0:	10bfffc4 	addi	r2,r2,-1
   112c4:	18c7883a 	add	r3,r3,r3
   112c8:	293ffb36 	bltu	r5,r4,112b8 <__alt_data_end+0xffff72b8>
   112cc:	0005883a 	mov	r2,zero
   112d0:	18000726 	beq	r3,zero,112f0 <__divsi3+0x58>
   112d4:	0005883a 	mov	r2,zero
   112d8:	31400236 	bltu	r6,r5,112e4 <__divsi3+0x4c>
   112dc:	314dc83a 	sub	r6,r6,r5
   112e0:	10c4b03a 	or	r2,r2,r3
   112e4:	1806d07a 	srli	r3,r3,1
   112e8:	280ad07a 	srli	r5,r5,1
   112ec:	183ffa1e 	bne	r3,zero,112d8 <__alt_data_end+0xffff72d8>
   112f0:	38000126 	beq	r7,zero,112f8 <__divsi3+0x60>
   112f4:	0085c83a 	sub	r2,zero,r2
   112f8:	f800283a 	ret
   112fc:	014bc83a 	sub	r5,zero,r5
   11300:	39c0005c 	xori	r7,r7,1
   11304:	003fe706 	br	112a4 <__alt_data_end+0xffff72a4>
   11308:	0109c83a 	sub	r4,zero,r4
   1130c:	01c00044 	movi	r7,1
   11310:	003fe306 	br	112a0 <__alt_data_end+0xffff72a0>
   11314:	00c00044 	movi	r3,1
   11318:	003fee06 	br	112d4 <__alt_data_end+0xffff72d4>

0001131c <__modsi3>:
   1131c:	20001716 	blt	r4,zero,1137c <__modsi3+0x60>
   11320:	000f883a 	mov	r7,zero
   11324:	2005883a 	mov	r2,r4
   11328:	28001216 	blt	r5,zero,11374 <__modsi3+0x58>
   1132c:	2900162e 	bgeu	r5,r4,11388 <__modsi3+0x6c>
   11330:	01800804 	movi	r6,32
   11334:	00c00044 	movi	r3,1
   11338:	00000106 	br	11340 <__modsi3+0x24>
   1133c:	30000a26 	beq	r6,zero,11368 <__modsi3+0x4c>
   11340:	294b883a 	add	r5,r5,r5
   11344:	31bfffc4 	addi	r6,r6,-1
   11348:	18c7883a 	add	r3,r3,r3
   1134c:	293ffb36 	bltu	r5,r4,1133c <__alt_data_end+0xffff733c>
   11350:	18000526 	beq	r3,zero,11368 <__modsi3+0x4c>
   11354:	1806d07a 	srli	r3,r3,1
   11358:	11400136 	bltu	r2,r5,11360 <__modsi3+0x44>
   1135c:	1145c83a 	sub	r2,r2,r5
   11360:	280ad07a 	srli	r5,r5,1
   11364:	183ffb1e 	bne	r3,zero,11354 <__alt_data_end+0xffff7354>
   11368:	38000126 	beq	r7,zero,11370 <__modsi3+0x54>
   1136c:	0085c83a 	sub	r2,zero,r2
   11370:	f800283a 	ret
   11374:	014bc83a 	sub	r5,zero,r5
   11378:	003fec06 	br	1132c <__alt_data_end+0xffff732c>
   1137c:	0109c83a 	sub	r4,zero,r4
   11380:	01c00044 	movi	r7,1
   11384:	003fe706 	br	11324 <__alt_data_end+0xffff7324>
   11388:	00c00044 	movi	r3,1
   1138c:	003ff106 	br	11354 <__alt_data_end+0xffff7354>

00011390 <__udivsi3>:
   11390:	200d883a 	mov	r6,r4
   11394:	2900152e 	bgeu	r5,r4,113ec <__udivsi3+0x5c>
   11398:	28001416 	blt	r5,zero,113ec <__udivsi3+0x5c>
   1139c:	00800804 	movi	r2,32
   113a0:	00c00044 	movi	r3,1
   113a4:	00000206 	br	113b0 <__udivsi3+0x20>
   113a8:	10000e26 	beq	r2,zero,113e4 <__udivsi3+0x54>
   113ac:	28000516 	blt	r5,zero,113c4 <__udivsi3+0x34>
   113b0:	294b883a 	add	r5,r5,r5
   113b4:	10bfffc4 	addi	r2,r2,-1
   113b8:	18c7883a 	add	r3,r3,r3
   113bc:	293ffa36 	bltu	r5,r4,113a8 <__alt_data_end+0xffff73a8>
   113c0:	18000826 	beq	r3,zero,113e4 <__udivsi3+0x54>
   113c4:	0005883a 	mov	r2,zero
   113c8:	31400236 	bltu	r6,r5,113d4 <__udivsi3+0x44>
   113cc:	314dc83a 	sub	r6,r6,r5
   113d0:	10c4b03a 	or	r2,r2,r3
   113d4:	1806d07a 	srli	r3,r3,1
   113d8:	280ad07a 	srli	r5,r5,1
   113dc:	183ffa1e 	bne	r3,zero,113c8 <__alt_data_end+0xffff73c8>
   113e0:	f800283a 	ret
   113e4:	0005883a 	mov	r2,zero
   113e8:	f800283a 	ret
   113ec:	00c00044 	movi	r3,1
   113f0:	003ff406 	br	113c4 <__alt_data_end+0xffff73c4>

000113f4 <__umodsi3>:
   113f4:	2005883a 	mov	r2,r4
   113f8:	2900122e 	bgeu	r5,r4,11444 <__umodsi3+0x50>
   113fc:	28001116 	blt	r5,zero,11444 <__umodsi3+0x50>
   11400:	01800804 	movi	r6,32
   11404:	00c00044 	movi	r3,1
   11408:	00000206 	br	11414 <__umodsi3+0x20>
   1140c:	30000c26 	beq	r6,zero,11440 <__umodsi3+0x4c>
   11410:	28000516 	blt	r5,zero,11428 <__umodsi3+0x34>
   11414:	294b883a 	add	r5,r5,r5
   11418:	31bfffc4 	addi	r6,r6,-1
   1141c:	18c7883a 	add	r3,r3,r3
   11420:	293ffa36 	bltu	r5,r4,1140c <__alt_data_end+0xffff740c>
   11424:	18000626 	beq	r3,zero,11440 <__umodsi3+0x4c>
   11428:	1806d07a 	srli	r3,r3,1
   1142c:	11400136 	bltu	r2,r5,11434 <__umodsi3+0x40>
   11430:	1145c83a 	sub	r2,r2,r5
   11434:	280ad07a 	srli	r5,r5,1
   11438:	183ffb1e 	bne	r3,zero,11428 <__alt_data_end+0xffff7428>
   1143c:	f800283a 	ret
   11440:	f800283a 	ret
   11444:	00c00044 	movi	r3,1
   11448:	003ff706 	br	11428 <__alt_data_end+0xffff7428>

0001144c <__mulsi3>:
   1144c:	0005883a 	mov	r2,zero
   11450:	20000726 	beq	r4,zero,11470 <__mulsi3+0x24>
   11454:	20c0004c 	andi	r3,r4,1
   11458:	2008d07a 	srli	r4,r4,1
   1145c:	18000126 	beq	r3,zero,11464 <__mulsi3+0x18>
   11460:	1145883a 	add	r2,r2,r5
   11464:	294b883a 	add	r5,r5,r5
   11468:	203ffa1e 	bne	r4,zero,11454 <__alt_data_end+0xffff7454>
   1146c:	f800283a 	ret
   11470:	f800283a 	ret

00011474 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11474:	00115001 	jmpi	11500 <alt_iic_isr_register>

00011478 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11478:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1147c:	00bfff84 	movi	r2,-2
   11480:	2084703a 	and	r2,r4,r2
   11484:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   11488:	00c00044 	movi	r3,1
   1148c:	d0a05b17 	ldw	r2,-32404(gp)
   11490:	194a983a 	sll	r5,r3,r5
   11494:	288ab03a 	or	r5,r5,r2
   11498:	d1605b15 	stw	r5,-32404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1149c:	d0a05b17 	ldw	r2,-32404(gp)
   114a0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114a4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   114a8:	0005883a 	mov	r2,zero
   114ac:	f800283a 	ret

000114b0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114b4:	00bfff84 	movi	r2,-2
   114b8:	2084703a 	and	r2,r4,r2
   114bc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   114c0:	00ffff84 	movi	r3,-2
   114c4:	d0a05b17 	ldw	r2,-32404(gp)
   114c8:	194a183a 	rol	r5,r3,r5
   114cc:	288a703a 	and	r5,r5,r2
   114d0:	d1605b15 	stw	r5,-32404(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   114d4:	d0a05b17 	ldw	r2,-32404(gp)
   114d8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114dc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   114e0:	0005883a 	mov	r2,zero
   114e4:	f800283a 	ret

000114e8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   114e8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   114ec:	00800044 	movi	r2,1
   114f0:	1144983a 	sll	r2,r2,r5
   114f4:	10c4703a 	and	r2,r2,r3
}
   114f8:	1004c03a 	cmpne	r2,r2,zero
   114fc:	f800283a 	ret

00011500 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11500:	00c007c4 	movi	r3,31
   11504:	19401616 	blt	r3,r5,11560 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11508:	defffe04 	addi	sp,sp,-8
   1150c:	dfc00115 	stw	ra,4(sp)
   11510:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11514:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11518:	00ffff84 	movi	r3,-2
   1151c:	80c6703a 	and	r3,r16,r3
   11520:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   11524:	280490fa 	slli	r2,r5,3
   11528:	00c00074 	movhi	r3,1
   1152c:	18c68c04 	addi	r3,r3,6704
   11530:	1885883a 	add	r2,r3,r2
   11534:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   11538:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1153c:	30000226 	beq	r6,zero,11548 <alt_iic_isr_register+0x48>
   11540:	00114780 	call	11478 <alt_ic_irq_enable>
   11544:	00000106 	br	1154c <alt_iic_isr_register+0x4c>
   11548:	00114b00 	call	114b0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1154c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   11550:	dfc00117 	ldw	ra,4(sp)
   11554:	dc000017 	ldw	r16,0(sp)
   11558:	dec00204 	addi	sp,sp,8
   1155c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   11560:	00bffa84 	movi	r2,-22
   11564:	f800283a 	ret

00011568 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11568:	deffff04 	addi	sp,sp,-4
   1156c:	01000074 	movhi	r4,1
   11570:	01400074 	movhi	r5,1
   11574:	dfc00015 	stw	ra,0(sp)
   11578:	2105f404 	addi	r4,r4,6096
   1157c:	29463b04 	addi	r5,r5,6380

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11580:	2140061e 	bne	r4,r5,1159c <alt_load+0x34>
   11584:	01000074 	movhi	r4,1
   11588:	01400074 	movhi	r5,1
   1158c:	21000804 	addi	r4,r4,32
   11590:	29400804 	addi	r5,r5,32
   11594:	2140121e 	bne	r4,r5,115e0 <alt_load+0x78>
   11598:	00000b06 	br	115c8 <alt_load+0x60>
   1159c:	00c00074 	movhi	r3,1
   115a0:	18c63b04 	addi	r3,r3,6380
   115a4:	1907c83a 	sub	r3,r3,r4
   115a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   115ac:	10fff526 	beq	r2,r3,11584 <__alt_data_end+0xffff7584>
    {
      *to++ = *from++;
   115b0:	114f883a 	add	r7,r2,r5
   115b4:	39c00017 	ldw	r7,0(r7)
   115b8:	110d883a 	add	r6,r2,r4
   115bc:	10800104 	addi	r2,r2,4
   115c0:	31c00015 	stw	r7,0(r6)
   115c4:	003ff906 	br	115ac <__alt_data_end+0xffff75ac>
   115c8:	01000074 	movhi	r4,1
   115cc:	01400074 	movhi	r5,1
   115d0:	2105ec04 	addi	r4,r4,6064
   115d4:	2945ec04 	addi	r5,r5,6064

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   115d8:	2140101e 	bne	r4,r5,1161c <alt_load+0xb4>
   115dc:	00000b06 	br	1160c <alt_load+0xa4>
   115e0:	00c00074 	movhi	r3,1
   115e4:	18c06004 	addi	r3,r3,384
   115e8:	1907c83a 	sub	r3,r3,r4
   115ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
   115f0:	10fff526 	beq	r2,r3,115c8 <__alt_data_end+0xffff75c8>
    {
      *to++ = *from++;
   115f4:	114f883a 	add	r7,r2,r5
   115f8:	39c00017 	ldw	r7,0(r7)
   115fc:	110d883a 	add	r6,r2,r4
   11600:	10800104 	addi	r2,r2,4
   11604:	31c00015 	stw	r7,0(r6)
   11608:	003ff906 	br	115f0 <__alt_data_end+0xffff75f0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1160c:	001172c0 	call	1172c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11610:	dfc00017 	ldw	ra,0(sp)
   11614:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   11618:	00117301 	jmpi	11730 <alt_icache_flush_all>
   1161c:	00c00074 	movhi	r3,1
   11620:	18c5f404 	addi	r3,r3,6096
   11624:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11628:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1162c:	18bff726 	beq	r3,r2,1160c <__alt_data_end+0xffff760c>
    {
      *to++ = *from++;
   11630:	114f883a 	add	r7,r2,r5
   11634:	39c00017 	ldw	r7,0(r7)
   11638:	110d883a 	add	r6,r2,r4
   1163c:	10800104 	addi	r2,r2,4
   11640:	31c00015 	stw	r7,0(r6)
   11644:	003ff906 	br	1162c <__alt_data_end+0xffff762c>

00011648 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11648:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1164c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11650:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11654:	00116d40 	call	116d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11658:	00116f40 	call	116f4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1165c:	d1a05c17 	ldw	r6,-32400(gp)
   11660:	d1605d17 	ldw	r5,-32396(gp)
   11664:	d1205e17 	ldw	r4,-32392(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11668:	dfc00017 	ldw	ra,0(sp)
   1166c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11670:	00103101 	jmpi	10310 <main>

00011674 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   11674:	00800044 	movi	r2,1
   11678:	20800226 	beq	r4,r2,11684 <write+0x10>
   1167c:	00800084 	movi	r2,2
   11680:	2080041e 	bne	r4,r2,11694 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   11684:	01000074 	movhi	r4,1
   11688:	000f883a 	mov	r7,zero
   1168c:	21063904 	addi	r4,r4,6372
   11690:	00116f81 	jmpi	116f8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11694:	d0a00e17 	ldw	r2,-32712(gp)
   11698:	10000926 	beq	r2,zero,116c0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1169c:	deffff04 	addi	sp,sp,-4
   116a0:	dfc00015 	stw	ra,0(sp)
   116a4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   116a8:	00c01444 	movi	r3,81
   116ac:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   116b0:	00bfffc4 	movi	r2,-1
   116b4:	dfc00017 	ldw	ra,0(sp)
   116b8:	dec00104 	addi	sp,sp,4
   116bc:	f800283a 	ret
   116c0:	d0a05a04 	addi	r2,gp,-32408
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   116c4:	00c01444 	movi	r3,81
   116c8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   116cc:	00bfffc4 	movi	r2,-1
   116d0:	f800283a 	ret

000116d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   116d4:	deffff04 	addi	sp,sp,-4
   116d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOSII, NIOSII);
   116dc:	00117a80 	call	117a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   116e0:	00800044 	movi	r2,1
   116e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   116e8:	dfc00017 	ldw	ra,0(sp)
   116ec:	dec00104 	addi	sp,sp,4
   116f0:	f800283a 	ret

000116f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   116f4:	f800283a 	ret

000116f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   116f8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   116fc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11700:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11704:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11708:	2980072e 	bgeu	r5,r6,11728 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1170c:	38c00037 	ldwio	r3,0(r7)
   11710:	18ffffec 	andhi	r3,r3,65535
   11714:	183ffc26 	beq	r3,zero,11708 <__alt_data_end+0xffff7708>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11718:	28c00007 	ldb	r3,0(r5)
   1171c:	20c00035 	stwio	r3,0(r4)
   11720:	29400044 	addi	r5,r5,1
   11724:	003ff806 	br	11708 <__alt_data_end+0xffff7708>

  return count;
}
   11728:	f800283a 	ret

0001172c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1172c:	f800283a 	ret

00011730 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11730:	f800283a 	ret

00011734 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11734:	213ffe84 	addi	r4,r4,-6
   11738:	008003c4 	movi	r2,15
   1173c:	11001636 	bltu	r2,r4,11798 <alt_exception_cause_generated_bad_addr+0x64>
   11740:	200890ba 	slli	r4,r4,2
   11744:	00800074 	movhi	r2,1
   11748:	1085d604 	addi	r2,r2,5976
   1174c:	2089883a 	add	r4,r4,r2
   11750:	20800017 	ldw	r2,0(r4)
   11754:	1000683a 	jmp	r2
   11758:	000117a0 	cmpeqi	zero,zero,1118
   1175c:	000117a0 	cmpeqi	zero,zero,1118
   11760:	00011798 	cmpnei	zero,zero,1118
   11764:	00011798 	cmpnei	zero,zero,1118
   11768:	00011798 	cmpnei	zero,zero,1118
   1176c:	000117a0 	cmpeqi	zero,zero,1118
   11770:	00011798 	cmpnei	zero,zero,1118
   11774:	00011798 	cmpnei	zero,zero,1118
   11778:	000117a0 	cmpeqi	zero,zero,1118
   1177c:	000117a0 	cmpeqi	zero,zero,1118
   11780:	00011798 	cmpnei	zero,zero,1118
   11784:	000117a0 	cmpeqi	zero,zero,1118
   11788:	00011798 	cmpnei	zero,zero,1118
   1178c:	00011798 	cmpnei	zero,zero,1118
   11790:	00011798 	cmpnei	zero,zero,1118
   11794:	000117a0 	cmpeqi	zero,zero,1118
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11798:	0005883a 	mov	r2,zero
   1179c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   117a0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   117a4:	f800283a 	ret

000117a8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   117a8:	000170fa 	wrctl	ienable,zero
   117ac:	f800283a 	ret
